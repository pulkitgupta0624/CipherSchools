This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
client/.gitignore
client/eslint.config.js
client/index.html
client/package.json
client/public/vite.svg
client/README.md
client/repomix-output.xml
client/src/App.css
client/src/App.jsx
client/src/assets/react.svg
client/src/assets/styles/global.css
client/src/components/Common/Button.jsx
client/src/components/Common/Loader.jsx
client/src/components/Common/Modal.jsx
client/src/components/Common/ProtectedRoute.jsx
client/src/components/Editor/CodeEditor.jsx
client/src/components/Editor/EditorTabs.jsx
client/src/components/FileExplorer/FileExplorer.jsx
client/src/components/FileExplorer/FileIcons.jsx
client/src/components/FileExplorer/FileTree.jsx
client/src/components/FileExplorer/FileTreeNode.jsx
client/src/components/Layout/Header.jsx
client/src/components/Layout/IDEHeader.jsx
client/src/components/Preview/SandpackPreview.jsx
client/src/contexts/AuthContext.jsx
client/src/contexts/ProjectContext.jsx
client/src/hooks/useDebounce.js
client/src/hooks/useLocalStorage.js
client/src/index.css
client/src/main.jsx
client/src/pages/Dashboard.jsx
client/src/pages/IDE.jsx
client/src/pages/Login.jsx
client/src/pages/NotFound.jsx
client/src/pages/Register.jsx
client/src/services/api.js
client/src/services/authService.js
client/src/services/fileService.js
client/src/services/projectService.js
client/src/services/storageService.js
client/src/utils/constants.js
client/src/utils/fileTemplates.js
client/src/utils/helpers.js
client/src/utils/validators.js
client/tailwind.config.js
client/vite.config.js
server/.gitignore
server/package.json
server/server.js
server/src/app.js
server/src/config/aws.js
server/src/config/cors.js
server/src/config/database.js
server/src/controllers/authController.js
server/src/controllers/fileController.js
server/src/controllers/projectController.js
server/src/controllers/userController.js
server/src/middleware/auth.js
server/src/middleware/errorHandler.js
server/src/middleware/rateLimiter.js
server/src/middleware/validation.js
server/src/models/File.js
server/src/models/Project.js
server/src/models/User.js
server/src/routes/authRoutes.js
server/src/routes/fileRoutes.js
server/src/routes/index.js
server/src/routes/projectRoutes.js
server/src/routes/userRoutes.js
server/src/utils/constants.js
server/src/utils/projectHelpers.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="client/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="client/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>client</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="client/package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@codesandbox/sandpack-react": "^2.20.0",
    "@codesandbox/sandpack-themes": "^2.0.21",
    "@monaco-editor/react": "^4.7.0",
    "@tailwindcss/vite": "^4.1.16",
    "axios": "^1.12.2",
    "clsx": "^2.1.1",
    "nanoid": "^5.1.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hotkeys-hook": "^5.2.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.9.4",
    "react-split": "^2.0.14",
    "react-toastify": "^11.0.5",
    "tailwindcss": "^4.1.16",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="client/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="client/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="client/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/assets/styles/global.css
src/components/Common/Button.jsx
src/components/Common/Loader.jsx
src/components/Common/Modal.jsx
src/components/Common/ProtectedRoute.jsx
src/components/Common/ThemeToggle.jsx
src/components/Editor/CodeEditor.jsx
src/components/Editor/EditorTabs.jsx
src/components/FileExplorer/FileExplorer.jsx
src/components/FileExplorer/FileIcons.jsx
src/components/FileExplorer/FileTree.jsx
src/components/FileExplorer/FileTreeNode.jsx
src/components/Layout/Header.jsx
src/components/Layout/IDEHeader.jsx
src/components/Preview/SandpackPreview.jsx
src/contexts/AuthContext.jsx
src/contexts/ProjectContext.jsx
src/contexts/ThemeContext.jsx
src/hooks/useDebounce.js
src/hooks/useLocalStorage.js
src/index.css
src/main.jsx
src/pages/Dashboard.jsx
src/pages/IDE.jsx
src/pages/Login.jsx
src/pages/NotFound.jsx
src/pages/Register.jsx
src/services/api.js
src/services/authService.js
src/services/fileService.js
src/services/projectService.js
src/services/storageService.js
src/utils/constants.js
src/utils/fileTemplates.js
src/utils/helpers.js
src/utils/validators.js
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>client</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@codesandbox/sandpack-react": "^2.20.0",
    "@codesandbox/sandpack-themes": "^2.0.21",
    "@monaco-editor/react": "^4.7.0",
    "@tailwindcss/vite": "^4.1.16",
    "axios": "^1.12.2",
    "clsx": "^2.1.1",
    "nanoid": "^5.1.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hotkeys-hook": "^5.2.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.9.4",
    "react-split": "^2.0.14",
    "react-toastify": "^11.0.5",
    "tailwindcss": "^4.1.16",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.css">
/* Split pane divider (gutter) styling */
.gutter {
  background-color: #2d2d2d;
  cursor: col-resize;
  width: 6px;
  transition: background-color 0.2s ease;
}
.gutter:hover {
  background-color: #4a4a4a;
}
</file>

<file path="src/App.jsx">
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { ThemeProvider } from './contexts/ThemeContext';
import Dashboard from './pages/Dashboard';
import IDE from './pages/IDE';
import Login from './pages/Login';
import Register from './pages/Register';
import NotFound from './pages/NotFound';
import ProtectedRoute from './components/common/ProtectedRoute';

function App() {
  return (
      <AuthProvider>
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } 
          />
          <Route path="/ide/:projectSlug?" element={<IDE />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/assets/styles/global.css">
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #1e1e1e;
}

::-webkit-scrollbar-thumb {
  background: #4a4a4a;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #5a5a5a;
}

/* Split pane styles */
.Resizer {
  background: #000;
  opacity: 0.2;
  z-index: 1;
  box-sizing: border-box;
  background-clip: padding-box;
}

.Resizer:hover {
  transition: all 0.2s ease;
}

.Resizer.horizontal {
  height: 11px;
  margin: -5px 0;
  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
  cursor: row-resize;
  width: 100%;
}

.Resizer.horizontal:hover {
  border-top: 5px solid rgba(0, 0, 0, 0.5);
  border-bottom: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.vertical {
  width: 11px;
  margin: 0 -5px;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  cursor: col-resize;
}

.Resizer.vertical:hover {
  border-left: 5px solid rgba(0, 0, 0, 0.5);
  border-right: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.disabled {
  cursor: not-allowed;
}

.Resizer.disabled:hover {
  border-color: transparent;
}
</file>

<file path="src/components/Common/Button.jsx">
import React from 'react';
import clsx from 'clsx';

export default function Button({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  className = '', 
  ...props 
}) {
  const baseClasses = 'inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    ghost: 'bg-transparent hover:bg-gray-100 ',
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm rounded',
    md: 'px-4 py-2 text-base rounded-lg',
    lg: 'px-6 py-3 text-lg rounded-lg',
  };

  return (
    <button
      className={clsx(baseClasses, variants[variant], sizes[size], className)}
      {...props}
    >
      {children}
    </button>
  );
}
</file>

<file path="src/components/Common/Loader.jsx">
import React from 'react';

export default function Loader({ size = 'md', className = '' }) {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
  };

  return (
    <div className={`animate-spin rounded-full border-b-2 border-primary-600 ${sizes[size]} ${className}`}></div>
  );
}
</file>

<file path="src/components/Common/Modal.jsx">
import React from 'react';
import { FaTimes } from 'react-icons/fa';

export default function Modal({ title, children, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white  rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-4 border-b ">
          <h2 className="text-xl font-semibold text-gray-900 ">
            {title}
          </h2>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100  rounded"
          >
            <FaTimes className="text-gray-500 " />
          </button>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/Common/ProtectedRoute.jsx">
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  // Allow access to dashboard without authentication for local storage version
  // Comment this out if you want to require authentication
  return children;

  // Uncomment this to require authentication
  // return user ? children : <Navigate to="/login" />;
}
</file>

<file path="src/components/Common/ThemeToggle.jsx">
import React from 'react';
import { useTheme } from '../../contexts/ThemeContext';
import { FaSun, FaMoon } from 'react-icons/fa';

export default function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-lg hover:bg-gray-100  transition"
      aria-label="Toggle theme"
    >
      {theme === 'dark' ? (
        <FaSun className="text-yellow-400 text-xl" />
      ) : (
        <FaMoon className="text-gray-600 text-xl" />
      )}
    </button>
  );
}
</file>

<file path="src/components/Editor/CodeEditor.jsx">
import React, { useEffect, useState } from 'react';
import MonacoEditor from '@monaco-editor/react';
import { useProject } from '../../contexts/ProjectContext';
// Removed useTheme import

export default function CodeEditor() {
  const { activeFile, updateFile } = useProject();
  // Removed theme logic
  const [value, setValue] = useState('');

  useEffect(() => {
    if (activeFile) {
      setValue(activeFile.content || '');
    }
  }, [activeFile]);

  const handleChange = (newValue) => {
    setValue(newValue);
    if (activeFile) {
      updateFile(activeFile._id, { content: newValue });
    }
  };

  if (!activeFile) {
    return (
      // Light theme: "no file" placeholder
      <div className="h-full flex items-center justify-center bg-gray-50 text-gray-500">
        <p>Select a file to edit</p>
      </div>
    );
  }

  return (
    <MonacoEditor
      height="100%"
      language={activeFile.language || 'javascript'}
      value={value}
      onChange={handleChange}
      // Set theme explicitly to "light"
      theme={'light'}
      options={{
        minimap: { enabled: false },
        fontSize: 14,
        wordWrap: 'on',
        automaticLayout: true,
        tabSize: 2,
      }}
    />
  );
}
</file>

<file path="src/components/Editor/EditorTabs.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaTimes } from 'react-icons/fa';
import { getFileIcon } from '../FileExplorer/FileIcons';

export default function EditorTabs() {
  const { openFiles, activeFile, setActiveFile, closeFile } = useProject();

  if (openFiles.length === 0) {
    return null;
  }

  return (
    // Light theme: light bg, grey border
    <div className="bg-gray-100 border-b border-gray-200 flex overflow-x-auto">
      {openFiles.map(file => (
        <div
          key={file._id}
          className={`
            flex items-center gap-2 px-3 py-2 cursor-pointer border-r border-gray-200
            ${activeFile?._id === file._id 
              // Active tab: white bg, dark text
              ? 'bg-white text-gray-900' 
              // Inactive tab: grey text, light hover
              : 'text-gray-500 hover:bg-gray-200'}
          `}
          onClick={() => setActiveFile(file)}
        >
          <span className="text-sm">{getFileIcon(file.extension)}</span>
          <span className="text-sm">{file.name}</span>
          <button
            onClick={(e) => {
              e.stopPropagation();
              closeFile(file._id);
            }}
            // Light theme: close button hover
            className="ml-2 p-1 hover:bg-gray-300 rounded"
          >
            <FaTimes className="text-xs" />
          </button>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileExplorer.jsx">
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTree from './FileTree';
import { FaPlus, FaFolder, FaFile } from 'react-icons/fa';

export default function FileExplorer() {
  const { project, files, createFile } = useProject();
  const [showNewItemMenu, setShowNewItemMenu] = useState(false);

  const handleNewFile = () => {
    const name = prompt('Enter file name:');
    if (name) {
      createFile(null, name, 'file');
    }
    setShowNewItemMenu(false);
  };

  const handleNewFolder = () => {
    const name = prompt('Enter folder name:');
    if (name) {
      createFile(null, name, 'folder');
    }
    setShowNewItemMenu(false);
  };

  return (
    // Light theme: white bg, dark text
    <div className="h-full bg-white text-gray-900 overflow-auto border-r border-gray-200">
      <div className="p-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {/* Light theme: muted grey title */}
          <h3 className="text-sm font-semibold uppercase text-gray-500">Explorer</h3>
          <button
            onClick={() => setShowNewItemMenu(!showNewItemMenu)}
            // Light theme: light grey hover
            className="p-1 hover:bg-gray-100 rounded"
          >
            <FaPlus className="text-xs text-gray-600" />
          </button>
        </div>
        
        {showNewItemMenu && (
          // Light theme: light dropdown menu
          <div className="mt-2 bg-white border border-gray-200 rounded p-1 shadow-lg">
            <button
              onClick={handleNewFile}
              // Light theme: light hover
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFile className="text-xs text-gray-500" />
              New File
            </button>
            <button
              onClick={handleNewFolder}
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFolder className="text-xs text-gray-500" />
              New Folder
            </button>
          </div>
        )}
      </div>
      
      <div className="p-2">
        <FileTree />
      </div>
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileIcons.jsx">
import React from 'react';
import { FaFile, FaJs, FaCss3, FaHtml5, FaReact, FaMarkdown, FaFileCode } from 'react-icons/fa';
import { SiTypescript, SiJson } from 'react-icons/si';

export const getFileIcon = (extension) => {
  const iconMap = {
    'js': <FaJs className="text-yellow-400" />,
    'jsx': <FaReact className="text-cyan-400" />,
    'ts': <SiTypescript className="text-blue-400" />,
    'tsx': <SiTypescript className="text-blue-400" />,
    'css': <FaCss3 className="text-blue-500" />,
    'scss': <FaCss3 className="text-pink-400" />,
    'html': <FaHtml5 className="text-orange-500" />,
    'json': <SiJson className="text-yellow-600" />,
    'md': <FaMarkdown className="text-gray-400" />,
    'svg': <FaFileCode className="text-orange-400" />,
  };

  return iconMap[extension] || <FaFile className="text-gray-400" />;
};
</file>

<file path="src/components/FileExplorer/FileTree.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTreeNode from './FileTreeNode';

export default function FileTree() {
  const { files } = useProject();
  
  // Get root level files/folders (parentId = null)
  const rootItems = files.filter(file => !file.parentId);
  
  // Sort folders first, then files
  const sortedItems = rootItems.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  return (
    <div className="select-none">
      {sortedItems.map(item => (
        <FileTreeNode key={item._id} node={item} level={0} />
      ))}
      {sortedItems.length === 0 && (
        <div className="text-dark-400 text-sm italic p-2">
          No files yet. Create a new file or folder.
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileTreeNode.jsx">
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaFolder, FaFolderOpen, FaFile, FaHtml5, FaReact, FaTrash, FaPlus } from 'react-icons/fa';
import { getFileIcon } from './FileIcons';

export default function FileTreeNode({ node, level }) {
  const { files, activeFile, openFile, deleteFile, createFile } = useProject();
  const [isExpanded, setIsExpanded] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const [showNewMenu, setShowNewMenu] = useState(false);

  const children = files.filter(file => file.parentId === node._id);
  const sortedChildren = children.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  const handleClick = () => {
    if (node.type === 'folder') {
      setIsExpanded(!isExpanded);
    } else {
      openFile(node);
    }
  };

  const handleDelete = (e) => {
    e.stopPropagation();
    if (confirm(`Are you sure you want to delete "${node.name}"?`)) {
      deleteFile(node._id);
    }
  };

  const handleNewFile = (e) => {
    e.stopPropagation();
    const name = prompt('Enter file name:');
    if (name) {
      createFile(node._id, name, 'file');
    }
    setShowNewMenu(false);
  };

  const handleNewFolder = (e) => {
    e.stopPropagation();
    const name = prompt('Enter folder name:');
    if (name) {
      createFile(node._id, name, 'folder');
    }
    setShowNewMenu(false);
  };

  const isActive = activeFile?._id === node._id;

  return (
    <div>
      <div
        className={`
          flex items-center gap-2 px-2 py-1 cursor-pointer hover:bg-dark-200 rounded
          ${isActive ? 'bg-dark-300' : ''}
        `}
        style={{ paddingLeft: `${level * 20 + 8}px` }}
        onClick={handleClick}
        onMouseEnter={() => setShowActions(true)}
        onMouseLeave={() => {
          setShowActions(false);
          setShowNewMenu(false);
        }}
      >
        <span className="text-sm">
          {node.type === 'folder' ? (
            isExpanded ? <FaFolderOpen className="text-yellow-600" /> : <FaFolder className="text-yellow-600" />
          ) : (
            getFileIcon(node.extension)
          )}
        </span>
        <span className="flex-1 text-sm truncate">{node.name}</span>
        
        {showActions && (
          <div className="flex items-center gap-1">
            {node.type === 'folder' && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setShowNewMenu(!showNewMenu);
                }}
                className="p-1 hover:bg-dark-300 rounded"
              >
                <FaPlus className="text-xs" />
              </button>
            )}
            <button
              onClick={handleDelete}
              className="p-1 hover:bg-red-600 hover:bg-opacity-20 rounded text-red-400"
            >
              <FaTrash className="text-xs" />
            </button>
          </div>
        )}
      </div>
      
      {showNewMenu && (
        <div className="ml-8 mt-1 bg-dark-200 rounded p-1">
          <button
            onClick={handleNewFile}
            className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
          >
            <FaFile className="text-xs" />
            New File
          </button>
          <button
            onClick={handleNewFolder}
            className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
          >
            <FaFolder className="text-xs" />
            New Folder
          </button>
        </div>
      )}
      
      {node.type === 'folder' && isExpanded && (
        <div>
          {sortedChildren.map(child => (
            <FileTreeNode key={child._id} node={child} level={level + 1} />
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/Layout/Header.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import { FaCode, FaSun, FaMoon, FaSignOutAlt, FaUser } from 'react-icons/fa';

export default function Header() {
  const { user, logout } = useAuth();
  const { theme, toggleTheme } = useTheme();

  return (
    <header className="bg-white shadow-md">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/dashboard" className="flex items-center gap-2 text-xl font-bold text-gray-900 ">
          <FaCode className="text-primary-600" />
          <span>CipherStudio</span>
        </Link>

        <div className="flex items-center gap-4">
          {/* <button 
            onClick={toggleTheme} 
            className="p-2 rounded-full text-gray-600 hover:bg-gray-100 "
          >
            {theme === 'dark' ? <FaSun /> : <FaMoon />}
          </button> */}
          
          {user ? (
            <div className="flex items-center gap-3">
              <span className="text-sm text-gray-700 ">
                Hi, {user.firstName}
              </span>
              <button
                onClick={logout}
                className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
                title="Logout"
              >
                <FaSignOutAlt />
                Logout
              </button>
            </div>
          ) : (
            <Link 
              to="/login" 
              className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
            >
              <FaUser />
              Login / Register
            </Link>
          )}
        </div>
      </nav>
    </header>
  );
}
</file>

<file path="src/components/Layout/IDEHeader.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { useProject } from '../../contexts/ProjectContext';
import { useAuth } from '../../contexts/AuthContext';
// Removed useTheme import
import { FaCode, FaSave, FaPlay, FaDownload, FaShare, FaHome } from 'react-icons/fa'; // Removed FaSun, FaMoon
import { useHotkeys } from 'react-hotkeys-hook';
import { toast } from 'react-toastify';

export default function IDEHeader() {
  const { project, saveProject, isSaving } = useProject();
  const { user } = useAuth();
  // Removed theme context logic
  const [autoSave, setAutoSave] = useState(true);

  // Auto-save every 30 seconds
  useEffect(() => {
    if (!autoSave) return;
    
    const interval = setInterval(() => {
      saveProject();
    }, 30000);

    return () => clearInterval(interval);
  }, [autoSave, saveProject]);

  // Keyboard shortcut for save
  useHotkeys('ctrl+s, cmd+s', (e) => {
    e.preventDefault();
    handleSave();
  });

  const handleSave = async () => {
    await saveProject();
  };

  const handleExport = () => {
    // Export project as ZIP
    toast.info('Export feature coming soon!');
  };

  const handleShare = () => {
    // Copy shareable link
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    toast.success('Link copied to clipboard!');
  };

  return (
    // Set to light theme: white background, light grey border
    <header className="bg-white border-b border-gray-200 px-4 py-2">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link to="/" className="flex items-center gap-2">
            <FaCode className="text-xl text-primary-600" />
            {/* Set to dark text */}
            <span className="text-sm font-bold text-gray-900">CipherStudio</span>
          </Link>
          
          {project && (
            <div className="flex items-center gap-2">
              {/* Set to light theme text colors */}
              <span className="text-gray-400">/</span>
              <h1 className="text-gray-900 font-medium">{project.name}</h1>
              {isSaving && (
                <span className="text-xs text-gray-500">Saving...</span>
              )}
            </div>
          )}
        </div>

        <div className="flex items-center gap-3">
          <button
            onClick={handleSave}
            // Light theme button: light grey bg, dark text
            className="flex items-center gap-2 px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm text-gray-800"
            disabled={isSaving}
          >
            <FaSave />
            Save
          </button>
          
          <button
            className="flex items-center gap-2 px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm text-white"
          >
            <FaPlay />
            Run
          </button>
          
          <button
            onClick={handleShare}
            // Light theme icon button: grey icon, darkens on hover with a light bg
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaShare />
          </button>
          
          <button
            onClick={handleExport}
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaDownload />
          </button>
          
          {/* --- Theme Toggle Button Removed --- */}
          
          <Link
            to="/dashboard"
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaHome />
          </Link>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/Preview/SandpackPreview.jsx">
import React from 'react';
import { SandpackProvider, SandpackPreview as Preview } from '@codesandbox/sandpack-react';
import { useProject } from '../../contexts/ProjectContext';
// Removed sandpackDark import

export default function SandpackPreview() {
  const { files, project } = useProject();
  
  // Convert files to Sandpack format
  const sandpackFiles = {};
  files.forEach(file => {
    if (file.type === 'file') {
      sandpackFiles[file.path] = {
        code: file.content || ''
      };
    }
  });

  // Ensure we have the basic files
  if (!sandpackFiles['/src/index.js']) {
    sandpackFiles['/src/index.js'] = {
      code: `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);`
    };
  }

  if (!sandpackFiles['/src/App.js']) {
    sandpackFiles['/src/App.js'] = {
      code: `export default function App() {
  return <h1>Welcome to CipherStudio!</h1>;
}`
    };
  }

  return (
    <div className="h-full bg-white">
      <SandpackProvider
        template="react"
        // Removed theme prop to default to light theme
        files={sandpackFiles}
        options={{
          showNavigator: true,
          showTabs: false,
          showLineNumbers: true,
          showInlineErrors: true,
          wrapContent: true,
          editorHeight: "100%",
        }}
      >
        <Preview
          showNavigator={true}
          showRefreshButton={true}
          showOpenInCodeSandbox={false}
        />
      </SandpackProvider>
    </div>
  );
}
</file>

<file path="src/contexts/AuthContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { authService } from '../services/authService';
import { toast } from 'react-toastify';

const AuthContext = createContext({});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const userData = await authService.getMe();
        setUser(userData);
      } catch (error) {
        localStorage.removeItem('token');
      }
    }
    setLoading(false);
  };

  const login = async (email, password) => {
    try {
      const response = await authService.login(email, password);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Login successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Login failed');
      return { success: false, error: error.message };
    }
  };

  const register = async (userData) => {
    try {
      const response = await authService.register(userData);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Registration successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Registration failed');
      return { success: false, error: error.message };
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
    toast.info('Logged out successfully');
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    checkAuth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="src/contexts/ProjectContext.jsx">
import React, { createContext, useContext, useState, useCallback } from 'react';
import { projectService } from '../services/projectService';
import { fileService } from '../services/fileService';
import { toast } from 'react-toastify';
import { nanoid } from 'nanoid';

const ProjectContext = createContext({});

export const useProject = () => useContext(ProjectContext);

export const ProjectProvider = ({ children }) => {
  const [project, setProject] = useState(null);
  const [files, setFiles] = useState([]);
  const [activeFile, setActiveFile] = useState(null);
  const [openFiles, setOpenFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const loadProject = async (projectSlug) => {
    setLoading(true);
    try {
      const data = await projectService.getProject(projectSlug);
      setProject(data.project);
      setFiles(data.files);
      return data;
    } catch (error) {
      toast.error('Failed to load project');
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const createProject = async (projectData) => {
    try {
      const newProject = await projectService.createProject(projectData);
      toast.success('Project created successfully');
      return newProject;
    } catch (error) {
      toast.error('Failed to create project');
      throw error;
    }
  };

  const saveProject = async () => {
    if (!project) return;
    
    setIsSaving(true);
    try {
      // Save to localStorage for MVP
      const projectData = {
        project,
        files,
        timestamp: Date.now()
      };
      localStorage.setItem(`project_${project.projectSlug}`, JSON.stringify(projectData));
      
      // If user is logged in, save to backend
      const token = localStorage.getItem('token');
      if (token) {
        await projectService.updateProject(project._id, { files });
      }
      
      toast.success('Project saved');
    } catch (error) {
      toast.error('Failed to save project');
    } finally {
      setIsSaving(false);
    }
  };

  const createFile = async (parentId, name, type = 'file') => {
    const newFile = {
      _id: nanoid(),
      projectId: project?._id || 'local',
      parentId,
      name,
      type,
      content: type === 'file' ? '' : undefined,
      path: buildPath(parentId, name),
      extension: type === 'file' ? name.split('.').pop() : undefined,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    setFiles(prev => [...prev, newFile]);
    
    if (type === 'file') {
      openFile(newFile);
    }

    // Save to backend if logged in
    const token = localStorage.getItem('token');
    if (token && project?._id) {
      try {
        await fileService.createFile(newFile);
      } catch (error) {
        console.error('Failed to save file to backend:', error);
      }
    }

    return newFile;
  };

  const updateFile = (fileId, updates) => {
    setFiles(prev => prev.map(file => 
      file._id === fileId 
        ? { ...file, ...updates, updatedAt: new Date().toISOString() }
        : file
    ));
  };

  const deleteFile = (fileId) => {
    const fileToDelete = files.find(f => f._id === fileId);
    if (!fileToDelete) return;

    // Close file if open
    setOpenFiles(prev => prev.filter(f => f._id !== fileId));
    if (activeFile?._id === fileId) {
      setActiveFile(null);
    }

    // Delete file and all children if folder
    const idsToDelete = [fileId];
    if (fileToDelete.type === 'folder') {
      const getChildrenIds = (parentId) => {
        const children = files.filter(f => f.parentId === parentId);
        children.forEach(child => {
          idsToDelete.push(child._id);
          if (child.type === 'folder') {
            getChildrenIds(child._id);
          }
        });
      };
      getChildrenIds(fileId);
    }

    setFiles(prev => prev.filter(f => !idsToDelete.includes(f._id)));
  };

  const openFile = (file) => {
    if (file.type !== 'file') return;
    
    if (!openFiles.find(f => f._id === file._id)) {
      setOpenFiles(prev => [...prev, file]);
    }
    setActiveFile(file);
  };

  const closeFile = (fileId) => {
    setOpenFiles(prev => {
      const newOpenFiles = prev.filter(f => f._id !== fileId);
      if (activeFile?._id === fileId && newOpenFiles.length > 0) {
        setActiveFile(newOpenFiles[newOpenFiles.length - 1]);
      } else if (newOpenFiles.length === 0) {
        setActiveFile(null);
      }
      return newOpenFiles;
    });
  };

  const buildPath = (parentId, name) => {
    if (!parentId) return `/${name}`;
    const parent = files.find(f => f._id === parentId);
    return parent ? `${parent.path}/${name}` : `/${name}`;
  };

  const value = {
    project,
    files,
    activeFile,
    openFiles,
    loading,
    isSaving,
    loadProject,
    createProject,
    saveProject,
    createFile,
    updateFile,
    deleteFile,
    openFile,
    closeFile,
    setActiveFile
  };

  return (
    <ProjectContext.Provider value={value}>
      {children}
    </ProjectContext.Provider>
  );
};
</file>

<file path="src/contexts/ThemeContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext({});

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem('theme');
    return savedTheme || 'dark';
  });

  useEffect(() => {
    localStorage.setItem('theme', theme);
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};
</file>

<file path="src/hooks/useDebounce.js">
import { useState, useEffect } from 'react';

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
</file>

<file path="src/hooks/useLocalStorage.js">
import { useState, useEffect } from 'react';

export function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error loading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { ToastContainer } from 'react-toastify'
import App from './App.jsx'
import 'react-toastify/dist/ReactToastify.css'
// import './assets/styles/global.css'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
      <ToastContainer
        position="bottom-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="src/pages/Dashboard.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { projectService } from '../services/projectService';
import { storageService } from '../services/storageService';
import { FaPlus, FaFolder, FaClock, FaTrash, FaCode } from 'react-icons/fa';
import { toast } from 'react-toastify';
import Header from '../components/Layout/Header';
import Modal from '../components/Common/Modal';

export default function Dashboard() {
    const { user } = useAuth();
    const navigate = useNavigate();
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [newProject, setNewProject] = useState({
        name: '',
        description: '',
        framework: 'react'
    });

    useEffect(() => {
        loadProjects();
    }, [user]);

    const loadProjects = async () => {
        setLoading(true);
        try {
            if (user) {
                const response = await projectService.getProjects();
                setProjects(response || []);
            } else {
                // Load from localStorage for non-authenticated users
                const localProjects = storageService.getAllProjects();
                setProjects(localProjects.map(p => p.project));
            }
        } catch (error) {
            console.error('Failed to load projects:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateProject = async () => {
        if (!newProject.name) {
            toast.error('Project name is required');
            return;
        }

        try {
            if (user) {
                const project = await projectService.createProject(newProject);
                navigate(`/ide/${project.projectSlug}`);
            } else {
                // Create local project
                const projectSlug = `${newProject.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`;
                const project = {
                    ...newProject,
                    projectSlug,
                    _id: `local_${Date.now()}`,
                    createdAt: new Date().toISOString()
                };

                storageService.saveProject(projectSlug, {
                    project,
                    files: [],
                    timestamp: Date.now()
                });

                navigate(`/ide/${projectSlug}`);
            }
        } catch (error) {
            toast.error('Failed to create project');
        }
    };

    const handleDeleteProject = async (projectId, projectSlug) => {
        if (!confirm('Are you sure you want to delete this project?')) return;

        try {
            if (user) {
                await projectService.deleteProject(projectId);
            } else {
                storageService.deleteProject(projectSlug);
            }
            await loadProjects();
            toast.success('Project deleted successfully');
        } catch (error) {
            toast.error('Failed to delete project');
        }
    };

    return (
        <div className="min-h-screen bg-gray-50 ">
            <Header />

            <div className="container mx-auto px-4 py-8">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 ">
                        My Projects
                    </h1>
                    <button
                        onClick={() => setShowCreateModal(true)}
                        className="flex items-center gap-2 bg-gray-300 text-black px-4 py-2 rounded-lg hover:bg-gray-200 transition"
                    >
                        <FaPlus />
                        New Project
                    </button>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
                    </div>
                ) : projects.length === 0 ? (
                    <div className="text-center py-12">
                        <FaFolder className="text-6xl text-gray-400 mx-auto mb-4" />
                        <h2 className="text-xl text-gray-600  mb-2">No projects yet</h2>
                        <p className="text-gray-500 ">Create your first project to get started</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {projects.map((project) => (
                            <div
                                key={project._id || project.projectSlug}
                                className="bg-white  rounded-lg shadow-md hover:shadow-lg transition-shadow"
                            >
                                <Link
                                    to={`/ide/${project.projectSlug}`}
                                    className="block p-6"
                                >
                                    <div className="flex items-start justify-between mb-4">
                                        <FaCode className="text-3xl text-primary-600" />
                                        <span className="text-xs bg-gray-100  px-2 py-1 rounded">
                                            {project.framework || 'react'}
                                        </span>
                                    </div>
                                    <h3 className="text-lg font-semibold text-gray-900  mb-2">
                                        {project.name}
                                    </h3>
                                    <p className="text-gray-600  text-sm mb-4 line-clamp-2">
                                        {project.description || 'No description'}
                                    </p>
                                    <div className="flex items-center text-xs text-gray-500 ">
                                        <FaClock className="mr-1" />
                                        {new Date(project.createdAt).toLocaleDateString()}
                                    </div>
                                </Link>
                                <div className="border-t  px-6 py-3">
                                    <button
                                        onClick={(e) => {
                                            e.preventDefault();
                                            handleDeleteProject(project._id, project.projectSlug);
                                        }}
                                        className="text-red-600 hover:text-red-700 text-sm flex items-center gap-1"
                                    >
                                        <FaTrash />
                                        Delete
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {showCreateModal && (
                <Modal
                    title="Create New Project"
                    onClose={() => setShowCreateModal(false)}
                >
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Project Name *
                            </label>
                            <input
                                type="text"
                                value={newProject.name}
                                onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                                placeholder="My Awesome Project"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Description
                            </label>
                            <textarea
                                value={newProject.description}
                                onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                                rows="3"
                                placeholder="A brief description of your project..."
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Framework
                            </label>
                            <select
                                value={newProject.framework}
                                onChange={(e) => setNewProject({ ...newProject, framework: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                            >
                                <option value="react">React</option>
                                <option value="vue">Vue</option>
                                <option value="vanilla">Vanilla JS</option>
                            </select>
                        </div>
                        <div className="flex justify-end gap-3 pt-4">
                            <button
                                onClick={() => setShowCreateModal(false)}
                                className="px-4 py-2 text-gray-600  hover:text-gray-700 "
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleCreateProject}
                                className="px-4 py-2 bg-gray-300 text-black rounded-lg hover:bg-gray-200"
                            >
                                Create Project
                            </button>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
}
</file>

<file path="src/pages/IDE.jsx">
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import Split from 'react-split';
import { ProjectProvider } from '../contexts/ProjectContext';
import FileExplorer from '../components/FileExplorer/FileExplorer';
import CodeEditor from '../components/Editor/CodeEditor';
import SandpackPreview from '../components/Preview/SandpackPreview';
import IDEHeader from '../components/Layout/IDEHeader';
import EditorTabs from '../components/Editor/EditorTabs';
import { storageService } from '../services/storageService';
import { toast } from 'react-toastify';

export default function IDE() {
  const { projectSlug } = useParams();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (projectSlug) {
      loadProject();
    } else {
      createTempProject();
    }
  }, [projectSlug]);

  const loadProject = async () => {
    setLoading(true);
    try {
      const localProject = storageService.loadProject(projectSlug);
      if (localProject) {
        setLoading(false);
        return;
      }
    } catch (error) {
      toast.error('Failed to load project');
    } finally {
      setLoading(false);
    }
  };

  const createTempProject = () => {
    setLoading(false);
  };

  if (loading) {
    return (
      <div className="h-screen flex items-center justify-center ">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-dark-600">Loading project...</p>
        </div>
      </div>
    );
  }

  return (
    <ProjectProvider>
      <div className="h-screen flex flex-col bg-dark-50">
        <IDEHeader />
        <div className="flex-1 overflow-hidden">
          {/* Outer split: File explorer + Editor/Preview */}
          <Split
            className="flex h-full"
            sizes={[20, 80]} // percentage widths
            minSize={200}
            gutterSize={6}
          >
            <FileExplorer />

            {/* Inner split: Code editor + Live preview */}
            <Split
              className="flex h-full"
              sizes={[50, 50]}
              minSize={300}
              gutterSize={6}
            >
              <div className="h-full flex flex-col bg-dark-100">
                <EditorTabs />
                <CodeEditor />
              </div>

              <SandpackPreview />
            </Split>
          </Split>
        </div>
      </div>
    </ProjectProvider>
  );
}
</file>

<file path="src/pages/Login.jsx">
// client/src/pages/Login.jsx
// Update the input className to fix visibility issues

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode, FaEnvelope, FaLock } from 'react-icons/fa';

export default function Login() {
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    await login(formData.email, formData.password);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Welcome Back
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Email Address
            </label>
            <div className="relative">
              <FaEnvelope className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="you@example.com"
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Password
            </label>
            <div className="relative">
              <FaLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="••••••••"
                required
              />
            </div>
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Signing in...' : 'Sign In'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Don't have an account?{' '}
            <Link to="/register" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign Up
            </Link>
          </p>
        </div>
        
        <div className="mt-4 text-center">
          <Link to="/ide" className="text-sm text-gray-500  hover:text-gray-600">
            Continue without account →
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/NotFound.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { FaHome, FaCode } from 'react-icons/fa';

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 ">
      <div className="text-center">
        <h1 className="text-9xl font-bold text-primary-600">404</h1>
        <h2 className="text-3xl font-semibold text-gray-900  mb-4">
          Page Not Found
        </h2>
        <p className="text-gray-600  mb-8">
          The page you're looking for doesn't exist or has been moved.
        </p>
        <div className="flex gap-4 justify-center">
          <Link
            to="/"
            className="flex items-center gap-2 bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition"
          >
            <FaHome />
            Go Home
          </Link>
          <Link
            to="/ide"
            className="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition"
          >
            <FaCode />
            Open IDE
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/Register.jsx">
// client/src/pages/Register.jsx
// Update all input field classNames

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode } from 'react-icons/fa';

export default function Register() {
  const { register } = useAuth();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    mobile: ''
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    
    if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    const { confirmPassword, ...userData } = formData;
    await register(userData);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800 py-12">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Create Account
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                First Name
              </label>
              <input
                type="text"
                value={formData.firstName}
                onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                Last Name
              </label>
              <input
                type="text"
                value={formData.lastName}
                onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Email Address
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Mobile (Optional)
            </label>
            <input
              type="tel"
              value={formData.mobile}
              onChange={(e) => setFormData({ ...formData, mobile: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Password
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">{errors.password}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Confirm Password
            </label>
            <input
              type="password"
              value={formData.confirmPassword}
              onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.confirmPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>
            )}
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Creating Account...' : 'Sign Up'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Already have an account?{' '}
            <Link to="/login" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign In
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/services/api.js">
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor to add token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const message = error.response?.data?.message || error.message || 'Something went wrong';
    return Promise.reject({ message, status: error.response?.status });
  }
);

export default api;
</file>

<file path="src/services/authService.js">
import api from './api';

export const authService = {
  register: async (userData) => {
    const response = await api.post('/auth/register', userData);
    return response.data;
  },

  login: async (email, password) => {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },

  getMe: async () => {
    const response = await api.get('/auth/me');
    return response.data;
  },

  updatePassword: async (currentPassword, newPassword) => {
    const response = await api.put('/auth/updatepassword', {
      currentPassword,
      newPassword
    });
    return response.data;
  }
};
</file>

<file path="src/services/fileService.js">
import api from './api';

export const fileService = {
  createFile: async (fileData) => {
    const response = await api.post('/files', fileData);
    return response.data;
  },

  getFile: async (fileId) => {
    const response = await api.get(`/files/${fileId}`);
    return response.data;
  },

  updateFile: async (fileId, updates) => {
    const response = await api.put(`/files/${fileId}`, updates);
    return response.data;
  },

  deleteFile: async (fileId) => {
    const response = await api.delete(`/files/${fileId}`);
    return response.data;
  },

  moveFile: async (fileId, newParentId) => {
    const response = await api.put(`/files/${fileId}/move`, { newParentId });
    return response.data;
  }
};
</file>

<file path="src/services/projectService.js">
import api from './api';

export const projectService = {
  createProject: async (projectData) => {
    const response = await api.post('/projects', projectData);
    return response.data;
  },

  getProjects: async (page = 1, limit = 10) => {
    const response = await api.get(`/projects?page=${page}&limit=${limit}`);
    return response.data;
  },

  getProject: async (projectSlug) => {
    const response = await api.get(`/projects/${projectSlug}`);
    return response.data;
  },

  updateProject: async (projectId, updates) => {
    const response = await api.put(`/projects/${projectId}`, updates);
    return response.data;
  },

  deleteProject: async (projectId) => {
    const response = await api.delete(`/projects/${projectId}`);
    return response.data;
  },

  forkProject: async (projectId) => {
    const response = await api.post(`/projects/${projectId}/fork`);
    return response.data;
  }
};
</file>

<file path="src/services/storageService.js">
export const storageService = {
  saveProject: (projectSlug, data) => {
    try {
      localStorage.setItem(`project_${projectSlug}`, JSON.stringify(data));
      return true;
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
      return false;
    }
  },

  loadProject: (projectSlug) => {
    try {
      const data = localStorage.getItem(`project_${projectSlug}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('Failed to load from localStorage:', error);
      return null;
    }
  },

  deleteProject: (projectSlug) => {
    try {
      localStorage.removeItem(`project_${projectSlug}`);
      return true;
    } catch (error) {
      console.error('Failed to delete from localStorage:', error);
      return false;
    }
  },

  getAllProjects: () => {
    try {
      const projects = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('project_')) {
          const data = localStorage.getItem(key);
          if (data) {
            projects.push(JSON.parse(data));
          }
        }
      }
      return projects;
    } catch (error) {
      console.error('Failed to get all projects:', error);
      return [];
    }
  }
};
</file>

<file path="src/utils/constants.js">
export const FILE_EXTENSIONS = {
  JAVASCRIPT: ['js', 'mjs'],
  JSX: ['jsx'],
  TYPESCRIPT: ['ts'],
  TSX: ['tsx'],
  CSS: ['css'],
  SCSS: ['scss', 'sass'],
  HTML: ['html', 'htm'],
  JSON: ['json'],
  MARKDOWN: ['md', 'markdown'],
  TEXT: ['txt'],
  XML: ['xml'],
  YAML: ['yml', 'yaml'],
};

export const LANGUAGE_MAP = {
  js: 'javascript',
  jsx: 'javascript',
  ts: 'typescript',
  tsx: 'typescript',
  css: 'css',
  scss: 'scss',
  html: 'html',
  json: 'json',
  md: 'markdown',
  txt: 'plaintext',
  xml: 'xml',
  yml: 'yaml',
  yaml: 'yaml',
};

export const DEFAULT_PROJECT_STRUCTURE = {
  framework: 'react',
  dependencies: {
    'react': '^18.2.0',
    'react-dom': '^18.2.0'
  }
};

export const THEMES = {
  LIGHT: 'light',
  DARK: 'dark'
};

export const AUTO_SAVE_INTERVAL = 30000; // 30 seconds
</file>

<file path="src/utils/fileTemplates.js">
export const fileTemplates = {
  'App.js': `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`,

  'App.css': `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.App-header {
  background-color: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 40px;
  border-radius: 20px;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  color: white;
}

.App-header h1 {
  margin: 0 0 20px 0;
  font-size: 2.5rem;
}

.App-header p {
  margin: 0;
  opacity: 0.9;
  font-size: 1.2rem;
}`,

  'index.js': `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,

  'index.css': `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`,

  'index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio Project" />
    <title>CipherStudio Project</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,

  'package.json': `{
  "name": "cipherstudio-project",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}`
};

export const createDefaultFiles = () => {
  const files = [
    {
      name: 'src',
      type: 'folder',
      path: '/src'
    },
    {
      name: 'public',
      type: 'folder',
      path: '/public'
    },
    {
      name: 'App.js',
      type: 'file',
      path: '/src/App.js',
      content: fileTemplates['App.js'],
      extension: 'js',
      language: 'javascript'
    },
    {
      name: 'App.css',
      type: 'file',
      path: '/src/App.css',
      content: fileTemplates['App.css'],
      extension: 'css',
      language: 'css'
    },
    {
      name: 'index.js',
      type: 'file',
      path: '/src/index.js',
      content: fileTemplates['index.js'],
      extension: 'js',
      language: 'javascript'
    },
    {
      name: 'index.css',
      type: 'file',
      path: '/src/index.css',
      content: fileTemplates['index.css'],
      extension: 'css',
      language: 'css'
    },
    {
      name: 'index.html',
      type: 'file',
      path: '/public/index.html',
      content: fileTemplates['index.html'],
      extension: 'html',
      language: 'html'
    },
    {
      name: 'package.json',
      type: 'file',
      path: '/package.json',
      content: fileTemplates['package.json'],
      extension: 'json',
      language: 'json'
    }
  ];

  return files;
};
</file>

<file path="src/utils/helpers.js">
import { nanoid } from 'nanoid';

export const generateId = () => nanoid();

export const getFileExtension = (filename) => {
  const parts = filename.split('.');
  return parts.length > 1 ? parts.pop().toLowerCase() : '';
};

export const getFileLanguage = (filename) => {
  const extension = getFileExtension(filename);
  const languageMap = {
    js: 'javascript',
    jsx: 'javascript',
    ts: 'typescript',
    tsx: 'typescript',
    css: 'css',
    scss: 'scss',
    html: 'html',
    json: 'json',
    md: 'markdown',
    txt: 'plaintext',
  };
  return languageMap[extension] || 'plaintext';
};

export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
};

export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

export const buildFileTree = (files) => {
  const tree = {};
  const rootFiles = [];

  files.forEach(file => {
    if (!file.parentId) {
      rootFiles.push(file);
    } else {
      if (!tree[file.parentId]) {
        tree[file.parentId] = [];
      }
      tree[file.parentId].push(file);
    }
  });

  return { tree, rootFiles };
};
</file>

<file path="src/utils/validators.js">
export const validateEmail = (email) => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

export const validatePassword = (password) => {
  return password.length >= 6;
};

export const validateProjectName = (name) => {
  return name.length > 0 && name.length <= 50;
};

export const validateFileName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};

export const validateFolderName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};
</file>

<file path="tailwind.config.js">
// client/tailwind.config.js
export default {
  darkMode: 'class', // enables Tailwind's dark mode toggle via class
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: {
    extend: {
      colors: {
        dark: {
          50: '#1e1e1e',
          100: '#2a2a2a',
          200: '#333333',
          300: '#3d3d3d',
          400: '#555555',
          500: '#777777',
          600: '#999999',
        },
        primary: {
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
        },
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true
      }
    }
  }
})
</file>

</files>
</file>

<file path="client/src/App.css">
/* Split pane divider (gutter) styling */
.gutter {
  background-color: #2d2d2d;
  cursor: col-resize;
  width: 6px;
  transition: background-color 0.2s ease;
}
.gutter:hover {
  background-color: #4a4a4a;
}
</file>

<file path="client/src/App.jsx">
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import Dashboard from './pages/Dashboard';
import IDE from './pages/IDE';
import Login from './pages/Login';
import Register from './pages/Register';
import NotFound from './pages/NotFound';
import ProtectedRoute from './components/common/ProtectedRoute';

function App() {
  return (
      <AuthProvider>
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } 
          />
          <Route path="/ide/:projectSlug?" element={<IDE />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
  );
}

export default App;
</file>

<file path="client/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="client/src/assets/styles/global.css">
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #1e1e1e;
}

::-webkit-scrollbar-thumb {
  background: #4a4a4a;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #5a5a5a;
}

/* Split pane styles */
.Resizer {
  background: #000;
  opacity: 0.2;
  z-index: 1;
  box-sizing: border-box;
  background-clip: padding-box;
}

.Resizer:hover {
  transition: all 0.2s ease;
}

.Resizer.horizontal {
  height: 11px;
  margin: -5px 0;
  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
  cursor: row-resize;
  width: 100%;
}

.Resizer.horizontal:hover {
  border-top: 5px solid rgba(0, 0, 0, 0.5);
  border-bottom: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.vertical {
  width: 11px;
  margin: 0 -5px;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  cursor: col-resize;
}

.Resizer.vertical:hover {
  border-left: 5px solid rgba(0, 0, 0, 0.5);
  border-right: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.disabled {
  cursor: not-allowed;
}

.Resizer.disabled:hover {
  border-color: transparent;
}
</file>

<file path="client/src/components/Common/Button.jsx">
import React from 'react';
import clsx from 'clsx';

export default function Button({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  className = '', 
  ...props 
}) {
  const baseClasses = 'inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    ghost: 'bg-transparent hover:bg-gray-100 ',
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm rounded',
    md: 'px-4 py-2 text-base rounded-lg',
    lg: 'px-6 py-3 text-lg rounded-lg',
  };

  return (
    <button
      className={clsx(baseClasses, variants[variant], sizes[size], className)}
      {...props}
    >
      {children}
    </button>
  );
}
</file>

<file path="client/src/components/Common/Loader.jsx">
import React from 'react';

export default function Loader({ size = 'md', className = '' }) {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
  };

  return (
    <div className={`animate-spin rounded-full border-b-2 border-primary-600 ${sizes[size]} ${className}`}></div>
  );
}
</file>

<file path="client/src/components/Common/Modal.jsx">
import React from 'react';
import { FaTimes } from 'react-icons/fa';

export default function Modal({ title, children, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white  rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-4 border-b ">
          <h2 className="text-xl font-semibold text-gray-900 ">
            {title}
          </h2>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100  rounded"
          >
            <FaTimes className="text-gray-500 " />
          </button>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/components/Common/ProtectedRoute.jsx">
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  // Allow access to dashboard without authentication for local storage version
  // Comment this out if you want to require authentication
  return children;

  // Uncomment this to require authentication
  // return user ? children : <Navigate to="/login" />;
}
</file>

<file path="client/src/components/Editor/CodeEditor.jsx">
// client/src/components/Editor/CodeEditor.jsx

import React, { useEffect, useState } from 'react';
import MonacoEditor from '@monaco-editor/react';
import { useProject } from '../../contexts/ProjectContext';
// import { useDebounce } from '../../hooks/useDebounce'; // <-- REMOVED

export default function CodeEditor() {
  const { activeFile, updateFile } = useProject();
  const [value, setValue] = useState('');
  // const debouncedValue = useDebounce(value, 500); // <-- REMOVED

  // EFFECT 1: Load file content into editor when activeFile changes (Keep this)
  useEffect(() => {
    if (activeFile) {
      setValue(activeFile.content || '');
    }
  }, [activeFile]);

  // EFFECT 2: Save debounced content changes back to the context <-- REMOVED THIS WHOLE BLOCK
  // useEffect(() => {
  //   if (activeFile && debouncedValue !== (activeFile.content || '')) {
  //     updateFile(activeFile._id, { content: debouncedValue });
  //   }
  // }, [debouncedValue, activeFile, updateFile]);

  // The main change handler
  const handleChange = (newValue) => {
    setValue(newValue); // Update local state immediately
    // Call updateFile to update the ProjectContext state, but it won't save automatically anymore
    if (activeFile) {
      updateFile(activeFile._id, { content: newValue });
    }
  };

  if (!activeFile) {
    return (
      <div className="h-full flex items-center justify-center bg-gray-50 text-gray-500">
        <p>Select a file to edit</p>
      </div>
    );
  }

  return (
    <MonacoEditor
      height="100%"
      language={activeFile.language || 'javascript'}
      value={value}
      onChange={handleChange}
      theme={'light'}
      options={{
        minimap: { enabled: false },
        fontSize: 14,
        wordWrap: 'on',
        automaticLayout: true,
        tabSize: 2,
      }}
    />
  );
}
</file>

<file path="client/src/components/Editor/EditorTabs.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaTimes } from 'react-icons/fa';
import { getFileIcon } from '../FileExplorer/FileIcons';

export default function EditorTabs() {
  const { openFiles, activeFile, setActiveFile, closeFile } = useProject();

  if (openFiles.length === 0) {
    return null;
  }

  return (
    // Light theme: light bg, grey border
    <div className="bg-gray-100 border-b border-gray-200 flex overflow-x-auto">
      {openFiles.map(file => (
        <div
          key={file._id}
          className={`
            flex items-center gap-2 px-3 py-2 cursor-pointer border-r border-gray-200
            ${activeFile?._id === file._id 
              // Active tab: white bg, dark text
              ? 'bg-white text-gray-900' 
              // Inactive tab: grey text, light hover
              : 'text-gray-500 hover:bg-gray-200'}
          `}
          onClick={() => setActiveFile(file)}
        >
          <span className="text-sm">{getFileIcon(file.extension)}</span>
          <span className="text-sm">{file.name}</span>
          <button
            onClick={(e) => {
              e.stopPropagation();
              closeFile(file._id);
            }}
            // Light theme: close button hover
            className="ml-2 p-1 hover:bg-gray-300 rounded"
          >
            <FaTimes className="text-xs" />
          </button>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="client/src/components/FileExplorer/FileExplorer.jsx">
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTree from './FileTree';
import { FaPlus, FaFolder, FaFile } from 'react-icons/fa';
import { getFileExtension, getFileLanguage } from '../../utils/helpers';

export default function FileExplorer() {
  const { project, files, createFile } = useProject();
  const [showNewItemMenu, setShowNewItemMenu] = useState(false);

  const buildPath = (parentId, name) => {
    if (!parentId) return `/${name}`;
    const parent = files.find(f => f._id === parentId);
    return parent ? `${parent.path}/${name}` : `/${name}`;
  };

  const handleNewFile = () => {
    const name = prompt('Enter file name:');
    if (name) {
      // ✅ BUILD THE FULL FILE OBJECT
      const extension = getFileExtension(name);
      const newFile = {
        projectId: project?._id || 'local',
        parentId: null, // This is a root file
        name,
        type: 'file',
        content: '',
        path: buildPath(null, name),
        extension: extension,
        language: getFileLanguage(extension)
      };
      createFile(newFile); // ✅ Pass the object
    }
    setShowNewItemMenu(false);
  };

  const handleNewFolder = () => {
    const name = prompt('Enter folder name:');
    if (name) {
      // ✅ BUILD THE FULL FOLDER OBJECT
      const newFolder = {
        projectId: project?._id || 'local',
        parentId: null, // This is a root folder
        name,
        type: 'folder',
        path: buildPath(null, name)
      };
      createFile(newFolder); // ✅ Pass the object
    }
    setShowNewItemMenu(false);
  };

  return (
    // Light theme: white bg, dark text
    <div className="h-full bg-white text-gray-900 overflow-auto border-r border-gray-200">
      <div className="p-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {/* Light theme: muted grey title */}
          <h3 className="text-sm font-semibold uppercase text-gray-500">Explorer</h3>
          <button
            onClick={() => setShowNewItemMenu(!showNewItemMenu)}
            // Light theme: light grey hover
            className="p-1 hover:bg-gray-100 rounded"
          >
            <FaPlus className="text-xs text-gray-600" />
          </button>
        </div>
        
        {showNewItemMenu && (
          // Light theme: light dropdown menu
          <div className="mt-2 bg-white border border-gray-200 rounded p-1 shadow-lg">
            <button
              onClick={handleNewFile}
              // Light theme: light hover
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFile className="text-xs text-gray-500" />
              New File
            </button>
            <button
              onClick={handleNewFolder}
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFolder className="text-xs text-gray-500" />
              New Folder
            </button>
          </div>
        )}
      </div>
      
      <div className="p-2">
        <FileTree />
      </div>
    </div>
  );
}
</file>

<file path="client/src/components/FileExplorer/FileIcons.jsx">
import React from 'react';
import { FaFile, FaJs, FaCss3, FaHtml5, FaReact, FaMarkdown, FaFileCode } from 'react-icons/fa';
import { SiTypescript, SiJson } from 'react-icons/si';

export const getFileIcon = (extension) => {
  const iconMap = {
    'js': <FaJs className="text-yellow-400" />,
    'jsx': <FaReact className="text-cyan-400" />,
    'ts': <SiTypescript className="text-blue-400" />,
    'tsx': <SiTypescript className="text-blue-400" />,
    'css': <FaCss3 className="text-blue-500" />,
    'scss': <FaCss3 className="text-pink-400" />,
    'html': <FaHtml5 className="text-orange-500" />,
    'json': <SiJson className="text-yellow-600" />,
    'md': <FaMarkdown className="text-gray-400" />,
    'svg': <FaFileCode className="text-orange-400" />,
  };

  return iconMap[extension] || <FaFile className="text-gray-400" />;
};
</file>

<file path="client/src/components/FileExplorer/FileTree.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTreeNode from './FileTreeNode';

export default function FileTree() {
  const { files } = useProject();
  
  // Get root level files/folders (parentId = null)
  const rootItems = files.filter(file => !file.parentId);
  
  // Sort folders first, then files
  const sortedItems = rootItems.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  return (
    <div className="select-none">
      {sortedItems.map(item => (
        <FileTreeNode key={item._id} node={item} level={0} />
      ))}
      {sortedItems.length === 0 && (
        <div className="text-dark-400 text-sm italic p-2">
          No files yet. Create a new file or folder.
        </div>
      )}
    </div>
  );
}
</file>

<file path="client/src/components/FileExplorer/FileTreeNode.jsx">
// client/src/components/FileExplorer/FileTreeNode.jsx
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaFolder, FaFolderOpen, FaFile, FaHtml5, FaReact, FaTrash, FaPlus } from 'react-icons/fa';
import { getFileIcon } from './FileIcons';
import { getFileExtension, getFileLanguage } from '../../utils/helpers';

export default function FileTreeNode({ node, level }) {
  const { project, files, activeFile, openFile, deleteFile, createFile } = useProject(); const [isExpanded, setIsExpanded] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const [showNewMenu, setShowNewMenu] = useState(false);

  const children = files.filter(file => file.parentId === node._id);
  const sortedChildren = children.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  const buildPath = (parentId, name) => {
    if (!parentId) return `/${name}`;
    const parent = files.find(f => f._id === parentId);
    return parent ? `${parent.path}/${name}` : `/${name}`;
  };

  const handleClick = () => {
    if (node.type === 'folder') {
      setIsExpanded(!isExpanded);
    } else {
      openFile(node);
    }
  };

  const handleDelete = (e) => {
    e.stopPropagation();
    if (confirm(`Are you sure you want to delete "${node.name}"?`)) {
      deleteFile(node._id);
    }
  };

  const handleNewFile = (e) => {
    e.stopPropagation();
    const name = prompt('Enter file name:');
    if (name) {
      // ✅ BUILD THE FULL FILE OBJECT
      const extension = getFileExtension(name);
      const newFile = {
        projectId: project?._id || 'local',
        parentId: node._id, // ✅ Use this node as the parent
        name,
        type: 'file',
        content: '',
        path: buildPath(node._id, name),
        extension: extension,
        language: getFileLanguage(extension)
      };
      createFile(newFile); // ✅ Pass the object
    }
    setShowNewMenu(false);
  };

  const handleNewFolder = (e) => {
    e.stopPropagation();
    const name = prompt('Enter folder name:');
    if (name) {
      // ✅ BUILD THE FULL FOLDER OBJECT
      const newFolder = {
        projectId: project?._id || 'local',
        parentId: node._id, // ✅ Use this node as the parent
        name,
        type: 'folder',
        path: buildPath(node._id, name)
      };
      createFile(newFolder); // ✅ Pass the object
    }
    setShowNewMenu(false);
  };

  const isActive = activeFile?._id === node._id;

  return (
    <div> {/* [cite: 525] This is the original root div */}

      {/* ✅ ADDED THIS WRAPPER DIV */}
      <div
        onMouseLeave={() => {
          setShowActions(false);
          setShowNewMenu(false);
        }}
      >
        <div
          className={`
            flex items-center gap-2 px-2 py-1 cursor-pointer hover:bg-dark-200 rounded
            ${isActive ? 'bg-dark-300' : ''}
          `}
          style={{ paddingLeft: `${level * 20 + 8}px` }}
          onClick={handleClick}
          onMouseEnter={() => setShowActions(true)}
        // ❌ REMOVED onMouseLeave from here
        >
          <span className="text-sm">
            {node.type === 'folder' ? (
              isExpanded ? <FaFolderOpen className="text-yellow-600" /> : <FaFolder className="text-yellow-600" />
            ) : (
              getFileIcon(node.extension)
            )}
          </span>
          <span className="flex-1 text-sm truncate">{node.name}</span>

          {showActions && (
            <div className="flex items-center gap-1">
              {node.type === 'folder' && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowNewMenu(!showNewMenu);
                  }}
                  className="p-1 hover:bg-dark-300 rounded"
                >
                  <FaPlus className="text-xs" />
                </button>
              )}
              <button
                onClick={handleDelete}
                className="p-1 hover:bg-red-600 hover:bg-opacity-20 rounded text-red-400"
              >
                <FaTrash className="text-xs" />
              </button>
            </div>
          )}
        </div>

        {/* ✅ This menu is now INSIDE the wrapper div */}
        {showNewMenu && (
          <div className="ml-8 mt-1 bg-dark-200 rounded p-1">
            <button
              onClick={handleNewFile}
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
            >
              <FaFile className="text-xs" />
              New File
            </button>
            <button
              onClick={handleNewFolder}
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
            >
              <FaFolder className="text-xs" />
              New Folder
            </button>
          </div>
        )}
      </div> {/* ✅ END OF WRAPPER DIV */}

      {node.type === 'folder' && isExpanded && (
        <div>
          {sortedChildren.map(child => (
            <FileTreeNode key={child._id} node={child} level={level + 1} />
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="client/src/components/Layout/Header.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { FaCode, FaSun, FaMoon, FaSignOutAlt, FaUser } from 'react-icons/fa';

export default function Header() {
  const { user, logout } = useAuth();

  return (
    <header className="bg-white shadow-md">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/dashboard" className="flex items-center gap-2 text-xl font-bold text-gray-900 ">
          <FaCode className="text-primary-600" />
          <span>CipherStudio</span>
        </Link>

        <div className="flex items-center gap-4">
          {/* <button 
            onClick={toggleTheme} 
            className="p-2 rounded-full text-gray-600 hover:bg-gray-100 "
          >
            {theme === 'dark' ? <FaSun /> : <FaMoon />}
          </button> */}
          
          {user ? (
            <div className="flex items-center gap-3">
              <span className="text-sm text-gray-700 ">
                Hi, {user.firstName}
              </span>
              <button
                onClick={logout}
                className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
                title="Logout"
              >
                <FaSignOutAlt />
                Logout
              </button>
            </div>
          ) : (
            <Link 
              to="/login" 
              className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
            >
              <FaUser />
              Login / Register
            </Link>
          )}
        </div>
      </nav>
    </header>
  );
}
</file>

<file path="client/src/components/Layout/IDEHeader.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { useProject } from '../../contexts/ProjectContext';
import { useAuth } from '../../contexts/AuthContext';
// Removed useTheme import
import { FaCode, FaSave, FaPlay, FaDownload, FaShare, FaHome } from 'react-icons/fa'; // Removed FaSun, FaMoon
import { useHotkeys } from 'react-hotkeys-hook';
import { toast } from 'react-toastify';

export default function IDEHeader() {
  const { project, saveProject, isSaving } = useProject();
  const { user } = useAuth();
  // Removed theme context logic
  const [autoSave, setAutoSave] = useState(true);

  // Auto-save every 30 seconds
  useEffect(() => {
    if (!autoSave) return;
    
    const interval = setInterval(() => {
      saveProject();
    }, 30000);

    return () => clearInterval(interval);
  }, [autoSave, saveProject]);

  // Keyboard shortcut for save
  useHotkeys('ctrl+s, cmd+s', (e) => {
    e.preventDefault();
    handleSave();
  });

  const handleSave = async () => {
    await saveProject();
  };

  const handleExport = () => {
    // Export project as ZIP
    toast.info('Export feature coming soon!');
  };

  const handleShare = () => {
    // Copy shareable link
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    toast.success('Link copied to clipboard!');
  };

  return (
    // Set to light theme: white background, light grey border
    <header className="bg-white border-b border-gray-200 px-4 py-2">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link to="/" className="flex items-center gap-2">
            <FaCode className="text-xl text-primary-600" />
            {/* Set to dark text */}
            <span className="text-sm font-bold text-gray-900">CipherStudio</span>
          </Link>
          
          {project && (
            <div className="flex items-center gap-2">
              {/* Set to light theme text colors */}
              <span className="text-gray-400">/</span>
              <h1 className="text-gray-900 font-medium">{project.name}</h1>
              {isSaving && (
                <span className="text-xs text-gray-500">Saving...</span>
              )}
            </div>
          )}
        </div>

        <div className="flex items-center gap-3">
          <button
            onClick={handleSave}
            // Light theme button: light grey bg, dark text
            className="flex items-center gap-2 px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm text-gray-800"
            disabled={isSaving}
          >
            <FaSave />
            Save
          </button>
          
          <button
            className="flex items-center gap-2 px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm text-white"
          >
            <FaPlay />
            Run
          </button>
          
          <button
            onClick={handleShare}
            // Light theme icon button: grey icon, darkens on hover with a light bg
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaShare />
          </button>
          
          <button
            onClick={handleExport}
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaDownload />
          </button>
          
          {/* --- Theme Toggle Button Removed --- */}
          
          <Link
            to="/dashboard"
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaHome />
          </Link>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="client/src/components/Preview/SandpackPreview.jsx">
import React, { useMemo } from 'react';
import { SandpackProvider, SandpackPreview as Preview, SandpackLayout } from '@codesandbox/sandpack-react';
import { useProject } from '../../contexts/ProjectContext';

export default function SandpackPreview() {
    const { files } = useProject();

    // Convert files to Sandpack format with proper error handling
    const sandpackFiles = useMemo(() => {
        const filesObj = {};

        files.forEach(file => {
            if (file.type === 'file' && file.path) {
                filesObj[file.path] = {
                    code: file.content || ''
                };
            }
        });

        // Ensure we have the essential files for React to work
        // FIXED: Proper React imports and exports
        if (!filesObj['/src/index.js'] && !filesObj['/src/index.jsx']) {
            filesObj['/src/index.js'] = {
                // ✅ CRITICAL FIX HERE - Use named import
                code: `import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`
            };
        }

        if (!filesObj['/src/App.js'] && !filesObj['/src/App.jsx']) {
            filesObj['/src/App.js'] = {
                code: `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`
            };
        }

        if (!filesObj['/src/App.css']) {
            filesObj['/src/App.css'] = {
                code: `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.App-header {
  background-color: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 40px;
  border-radius: 20px;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  color: white;
}

.App-header h1 {
  margin: 0 0 20px 0;
  font-size: 2.5rem;
}

.App-header p {
  margin: 0;
  opacity: 0.9;
  font-size: 1.2rem;
}`
            };
        }

        if (!filesObj['/src/index.css']) {
            filesObj['/src/index.css'] = {
                code: `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`
            };
        }

        if (!filesObj['/public/index.html']) {
            filesObj['/public/index.html'] = {
                code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio Project" />
    <title>CipherStudio Project</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`
            };
        }

        console.log('Sandpack Files:', filesObj); // Debug log
        return filesObj;
    }, [files]);

    return (
        <div className="h-full bg-white overflow-hidden">
            <SandpackProvider
                template="react"
                files={sandpackFiles}
                theme="light"
                options={{
                    showNavigator: true,
                    showTabs: false,
                    showLineNumbers: true,
                    showInlineErrors: true,
                    wrapContent: true,
                    editorHeight: '100%',
                    autorun: true,
                    autoReload: true,
                    recompileMode: 'immediate',
                }}
                customSetup={{
                    dependencies: {
                        'react': '^18.2.0',
                        'react-dom': '^18.2.0'
                    },
                    entry: '/src/index.js'
                }}
            >
                <SandpackLayout>
                    <Preview
                        showNavigator={true}
                        showRefreshButton={true}
                        showOpenInCodeSandbox={false}
                        style={{
                            height: '100%',
                            width: '100%',
                            border: 'none'
                        }}
                    />
                </SandpackLayout>
            </SandpackProvider>
        </div>
    );
}
</file>

<file path="client/src/contexts/AuthContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { authService } from '../services/authService';
import { toast } from 'react-toastify';

const AuthContext = createContext({});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const userData = await authService.getMe();
        setUser(userData);
      } catch (error) {
        localStorage.removeItem('token');
      }
    }
    setLoading(false);
  };

  const login = async (email, password) => {
    try {
      const response = await authService.login(email, password);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Login successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Login failed');
      return { success: false, error: error.message };
    }
  };

  const register = async (userData) => {
    try {
      const response = await authService.register(userData);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Registration successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Registration failed');
      return { success: false, error: error.message };
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
    toast.info('Logged out successfully');
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    checkAuth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="client/src/contexts/ProjectContext.jsx">
import React, { createContext, useContext, useState, useCallback } from 'react';
import { projectService } from '../services/projectService';
import { fileService } from '../services/fileService';
import { storageService } from '../services/storageService';
import { toast } from 'react-toastify';
import { nanoid } from 'nanoid';

const ProjectContext = createContext({});

export const useProject = () => useContext(ProjectContext);

export const ProjectProvider = ({ children }) => {
  const [project, setProject] = useState(null);
  const [files, setFiles] = useState([]);
  const [activeFile, setActiveFile] = useState(null);
  const [openFiles, setOpenFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const loadProject = async (projectSlug) => {
    setLoading(true);
    try {
      // Try to load from API first (for authenticated users)
      try {
        const data = await projectService.getProject(projectSlug);
        console.log('Loaded from API:', data); // Debug log
        setProject(data.project);
        setFiles(data.files || []);
        return data;
      } catch (apiError) {
        console.log('API load failed, trying localStorage:', apiError);

        // If API fails, try localStorage (for non-authenticated users)
        const localData = storageService.loadProject(projectSlug);
        if (localData) {
          console.log('Loaded from localStorage:', localData); // Debug log
          setProject(localData.project);
          setFiles(localData.files || []);
          return localData;
        } else {
          throw new Error('Project not found');
        }
      }
    } catch (error) {
      console.error('Failed to load project:', error);
      toast.error('Failed to load project');
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const createProject = async (projectData) => {
    try {
      const newProject = await projectService.createProject(projectData);
      toast.success('Project created successfully');
      return newProject;
    } catch (error) {
      toast.error('Failed to create project');
      throw error;
    }
  };

  const saveProject = async () => { // <-- Made async
    if (!project) return;

    setIsSaving(true);
    try {
      // 1. Always save full project state to localStorage
      storageService.saveProject(project.projectSlug, {
        project,
        files, // Save the current state of all files
        timestamp: Date.now()
      });

      // 2. Save ACTIVE file content to backend (if applicable)
      const token = localStorage.getItem('token');
      // Check if there's an active file, user is logged in, and it's not a local project
      if (activeFile && token && project?._id && !project._id.startsWith('local_')) {
        // Find the most recent version of the active file in the state
        const currentFileState = files.find(f => f._id === activeFile._id);
        if (currentFileState) {
          try {
            // Call the API to update only the content of the active file
            await fileService.updateFile(activeFile._id, { content: currentFileState.content });
            toast.success('Project saved!'); // Show success only after backend save (if attempted)
          } catch (apiError) {
            console.error('Failed to save active file to backend:', apiError);
            toast.error('Failed to save file changes to server.');
            // Note: We don't roll back the localStorage save here,
            // as it might contain other valid changes.
          }
        }
      } else if (!token || !project?._id || project._id.startsWith('local_')) {
         // If it's a local project or user isn't logged in, just confirm local save
         toast.success('Project saved locally!');
      }

    } catch (error) {
      toast.error('Failed to save project');
      console.error('Error during saveProject:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const createFile = async (fileData) => {
    // This is an "optimistic update".
    // We create a temporary file with a temp ID to make the UI feel fast.
    const newFile = {
      _id: nanoid(), // Temporary ID
      ...fileData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // Update the UI immediately
    setFiles(prev => [...prev, newFile]);

    // Now, try to save to the backend if we're logged in
    // and this isn't a local-only project
    const token = localStorage.getItem('token');
    if (token && project?._id && !project._id.startsWith('local_')) {
      try {
        // Send the new file (with temp ID) to the server
        const savedFile = await fileService.createFile(newFile);

        // Once saved, the server returns the REAL file (with a database _id).
        // We update our state again, replacing the temp file with the real one.
        setFiles(prev =>
          prev.map(f => (f._id === newFile._id ? savedFile : f))
        );

        return savedFile; // Return the saved file
      } catch (error) {
        console.error('Failed to save file to backend:', error);
        toast.error('Failed to create file on server');

        // !! ROLLBACK !!
        // If the API call fails, remove the temporary file we added.
        setFiles(prev => prev.filter(f => f._id !== newFile._id));
      }
    }

    return newFile; // Return the temp file (for local projects)
  };

  // This function is now async to handle the API call
  const updateFile = (fileId, updates) => {
    setFiles(prev =>
      prev.map(file =>
        file._id === fileId
          ? { ...file, ...updates, updatedAt: new Date().toISOString() }
          : file
      )
    );
  };

  const deleteFile = (fileId) => {
    const fileToDelete = files.find(f => f._id === fileId);
    if (!fileToDelete) return;

    setOpenFiles(prev => prev.filter(f => f._id !== fileId));
    if (activeFile?._id === fileId) {
      setActiveFile(null);
    }

    const idsToDelete = [fileId];
    if (fileToDelete.type === 'folder') {
      const getChildrenIds = (parentId) => {
        const children = files.filter(f => f.parentId === parentId);
        children.forEach(child => {
          idsToDelete.push(child._id);
          if (child.type === 'folder') {
            getChildrenIds(child._id);
          }
        });
      };
      getChildrenIds(fileId);
    }

    setFiles(prev => prev.filter(f => !idsToDelete.includes(f._id)));
  };

  const openFile = (file) => {
    if (file.type !== 'file') return;

    if (!openFiles.find(f => f._id === file._id)) {
      setOpenFiles(prev => [...prev, file]);
    }
    setActiveFile(file);
  };

  const closeFile = (fileId) => {
    setOpenFiles(prev => {
      const newOpenFiles = prev.filter(f => f._id !== fileId);
      if (activeFile?._id === fileId && newOpenFiles.length > 0) {
        setActiveFile(newOpenFiles[newOpenFiles.length - 1]);
      } else if (newOpenFiles.length === 0) {
        setActiveFile(null);
      }
      return newOpenFiles;
    });
  };

  const value = {
    project,
    files,
    activeFile,
    openFiles,
    loading,
    isSaving,
    loadProject,
    createProject,
    saveProject,
    createFile,
    updateFile,
    deleteFile,
    openFile,
    closeFile,
    setActiveFile
  };

  return (
    <ProjectContext.Provider value={value}>
      {children}
    </ProjectContext.Provider>
  );
};
</file>

<file path="client/src/hooks/useDebounce.js">
import { useState, useEffect } from 'react';

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
</file>

<file path="client/src/hooks/useLocalStorage.js">
import { useState, useEffect } from 'react';

export function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error loading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}
</file>

<file path="client/src/index.css">
@import "tailwindcss";
</file>

<file path="client/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { ToastContainer } from 'react-toastify'
import App from './App.jsx'
import 'react-toastify/dist/ReactToastify.css'
// import './assets/styles/global.css'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
      <ToastContainer
        position="bottom-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="client/src/pages/Dashboard.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { projectService } from '../services/projectService';
import { storageService } from '../services/storageService';
import Header from '../components/Layout/Header';
import Modal from '../components/Common/Modal';
import { FaPlus, FaTrash, FaEdit, FaFolder } from 'react-icons/fa';
import { toast } from 'react-toastify';
import { createDefaultProjectFiles } from '../utils/helpers';

export default function Dashboard() {
    const { user } = useAuth();
    const navigate = useNavigate();
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [newProject, setNewProject] = useState({
        name: '',
        description: '',
        framework: 'react'
    });

    useEffect(() => {
        loadProjects();
    }, [user]);

    const loadProjects = async () => {
        setLoading(true);
        try {
            if (user) {
                // Load from backend for authenticated users
                const response = await projectService.getProjects();
                setProjects(response || []);
            } else {
                // Load from localStorage for non-authenticated users
                const localProjects = storageService.getAllProjects();
                setProjects(localProjects);
            }
        } catch (error) {
            console.error('Failed to load projects:', error);
            toast.error('Failed to load projects');
        } finally {
            setLoading(false);
        }
    };

    const handleCreateProject = async () => {
        if (!newProject.name.trim()) {
            toast.error('Please enter a project name');
            return;
        }

        try {
            if (user) {
                // For authenticated users - backend handles file creation
                const project = await projectService.createProject(newProject);
                navigate(`/ide/${project.projectSlug}`);
            } else {
                // For non-authenticated users - create files locally
                const projectSlug = `${newProject.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`;
                const projectId = `local_${Date.now()}`;

                const project = {
                    ...newProject,
                    projectSlug,
                    _id: projectId,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };

                // CREATE DEFAULT FILES WITH PROPER STRUCTURE
                const defaultFiles = createDefaultProjectFiles(projectId, newProject.name);

                // Save project with files to localStorage
                storageService.saveProject(projectSlug, {
                    project,
                    files: defaultFiles,
                    timestamp: Date.now()
                });

                navigate(`/ide/${projectSlug}`);
            }

            setShowCreateModal(false);
            setNewProject({ name: '', description: '', framework: 'react' });
            toast.success('Project created successfully!');
        } catch (error) {
            toast.error('Failed to create project');
            console.error(error);
        }
    };

    const handleDeleteProject = async (projectId, projectSlug) => {
        if (!confirm('Are you sure you want to delete this project?')) return;

        try {
            if (user) {
                await projectService.deleteProject(projectId);
            } else {
                storageService.deleteProject(projectSlug);
            }
            await loadProjects();
            toast.success('Project deleted successfully');
        } catch (error) {
            toast.error('Failed to delete project');
        }
    };

    return (
        <div className="min-h-screen bg-gray-50">
            <Header />

            <div className="container mx-auto px-4 py-8">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900">
                        My Projects
                    </h1>
                    <button
                        onClick={() => setShowCreateModal(true)}
                        className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 "
                    >
                        <FaPlus />
                        New Project
                    </button>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
                    </div>
                ) : projects.length === 0 ? (
                    <div className="text-center py-16">
                        <FaFolder className="text-6xl text-gray-400 mx-auto mb-4" />
                        <h2 className="text-2xl font-semibold text-gray-700 mb-2">No projects yet</h2>
                        <p className="text-gray-500 mb-6">Create your first project to get started</p>
                        <button
                            onClick={() => setShowCreateModal(true)}
                            className="bg-primary-600 text-black px-6 py-3 rounded-lg hover:bg-primary-700 transition"
                        >
                            Create Project
                        </button>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {projects.map((project) => (
                            <div
                                key={project._id}
                                className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition cursor-pointer"
                            >
                                <div onClick={() => navigate(`/ide/${project.projectSlug}`)}>
                                    <h3 className="text-xl font-semibold text-gray-900 mb-2">
                                        {project.name}
                                    </h3>
                                    <p className="text-gray-600 mb-4 line-clamp-2">
                                        {project.description || 'No description'}
                                    </p>
                                    <div className="flex items-center justify-between text-sm text-gray-500">
                                        <span className="bg-primary-100 text-primary-800 px-2 py-1 rounded">
                                            {project.framework || 'react'}
                                        </span>
                                        <span>
                                            {new Date(project.createdAt).toLocaleDateString()}
                                        </span>
                                    </div>
                                </div>
                                <div className="flex gap-2 mt-4 pt-4 border-t">
                                    <button
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            navigate(`/ide/${project.projectSlug}`);
                                        }}
                                        className="flex-1 flex items-center justify-center gap-2 bg-primary-600 text-white px-3 py-2 rounded hover:bg-primary-700 transition"
                                    >
                                        <FaEdit /> Open
                                    </button>
                                    <button
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            handleDeleteProject(project._id, project.projectSlug);
                                        }}
                                        className="flex items-center justify-center gap-2 bg-red-600 text-white px-3 py-2 rounded hover:bg-red-700 transition"
                                    >
                                        <FaTrash />
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {/* Create Project Modal */}
            {showCreateModal && (
                <Modal onClose={() => setShowCreateModal(false)}>
                    <div className="p-6">
                        <h2 className="text-2xl font-bold mb-4">Create New Project</h2>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Project Name *
                                </label>
                                <input
                                    type="text"
                                    value={newProject.name}
                                    onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                                    placeholder="My Awesome Project"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Description
                                </label>
                                <textarea
                                    value={newProject.description}
                                    onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                                    rows="3"
                                    placeholder="What is this project about?"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Framework
                                </label>
                                <select
                                    value={newProject.framework}
                                    onChange={(e) => setNewProject({ ...newProject, framework: e.target.value })}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                                >
                                    <option value="react">React</option>
                                    <option value="vue">Vue</option>
                                    <option value="vanilla">Vanilla JS</option>
                                </select>
                            </div>
                        </div>
                        <div className="flex gap-3 mt-6">
                            <button
                                onClick={() => setShowCreateModal(false)}
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleCreateProject}
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                            >
                                Create Project
                            </button>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
}
</file>

<file path="client/src/pages/IDE.jsx">
import React, { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Split from 'react-split';
import { ProjectProvider, useProject } from '../contexts/ProjectContext';
import FileExplorer from '../components/FileExplorer/FileExplorer';
import CodeEditor from '../components/Editor/CodeEditor';
import SandpackPreview from '../components/Preview/SandpackPreview';
import IDEHeader from '../components/Layout/IDEHeader';
import EditorTabs from '../components/Editor/EditorTabs';

// Separate component that uses ProjectContext
function IDEContent() {
  const { projectSlug } = useParams();
  const { loadProject, loading, project } = useProject();

  useEffect(() => {
    if (projectSlug) {
      loadProject(projectSlug);
    }
  }, [projectSlug]);

  if (loading) {
    return (
      <div className="h-screen flex items-center justify-center bg-dark-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading project...</p>
        </div>
      </div>
    );
  }

  if (!project) {
    return (
      <div className="h-screen flex items-center justify-center bg-dark-50">
        <div className="text-center">
          <p className="text-gray-600 mb-4">Project not found</p>
          <a href="/dashboard" className="text-primary-600 hover:underline">
            Go to Dashboard
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-dark-50">
      <IDEHeader />
      <div className="flex-1 overflow-hidden">
        <Split
          className="flex h-full"
          sizes={[20, 80]}
          minSize={200}
          gutterSize={6}
        >
          <FileExplorer />
          <Split
            className="flex h-full"
            sizes={[50, 50]}
            minSize={300}
            gutterSize={6}
          >
            <div className="h-full flex flex-col bg-dark-100">
              <EditorTabs />
              <CodeEditor />
            </div>
            <SandpackPreview />
          </Split>
        </Split>
      </div>
    </div>
  );
}

// Main IDE component with ProjectProvider wrapper
export default function IDE() {
  return (
    <ProjectProvider>
      <IDEContent />
    </ProjectProvider>
  );
}
</file>

<file path="client/src/pages/Login.jsx">
// client/src/pages/Login.jsx
// Update the input className to fix visibility issues

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode, FaEnvelope, FaLock } from 'react-icons/fa';

export default function Login() {
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    await login(formData.email, formData.password);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Welcome Back
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Email Address
            </label>
            <div className="relative">
              <FaEnvelope className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="you@example.com"
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Password
            </label>
            <div className="relative">
              <FaLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="••••••••"
                required
              />
            </div>
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Signing in...' : 'Sign In'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Don't have an account?{' '}
            <Link to="/register" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign Up
            </Link>
          </p>
        </div>
        
        <div className="mt-4 text-center">
          <Link to="/ide" className="text-sm text-gray-500  hover:text-gray-600">
            Continue without account →
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/NotFound.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { FaHome, FaCode } from 'react-icons/fa';

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 ">
      <div className="text-center">
        <h1 className="text-9xl font-bold text-primary-600">404</h1>
        <h2 className="text-3xl font-semibold text-gray-900  mb-4">
          Page Not Found
        </h2>
        <p className="text-gray-600  mb-8">
          The page you're looking for doesn't exist or has been moved.
        </p>
        <div className="flex gap-4 justify-center">
          <Link
            to="/"
            className="flex items-center gap-2 bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition"
          >
            <FaHome />
            Go Home
          </Link>
          <Link
            to="/ide"
            className="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition"
          >
            <FaCode />
            Open IDE
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/Register.jsx">
// client/src/pages/Register.jsx
// Update all input field classNames

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode } from 'react-icons/fa';

export default function Register() {
  const { register } = useAuth();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    mobile: ''
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    
    if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    const { confirmPassword, ...userData } = formData;
    await register(userData);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800 py-12">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Create Account
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                First Name
              </label>
              <input
                type="text"
                value={formData.firstName}
                onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                Last Name
              </label>
              <input
                type="text"
                value={formData.lastName}
                onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Email Address
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Mobile (Optional)
            </label>
            <input
              type="tel"
              value={formData.mobile}
              onChange={(e) => setFormData({ ...formData, mobile: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Password
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">{errors.password}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Confirm Password
            </label>
            <input
              type="password"
              value={formData.confirmPassword}
              onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.confirmPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>
            )}
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Creating Account...' : 'Sign Up'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Already have an account?{' '}
            <Link to="/login" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign In
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/services/api.js">
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor to add token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const message = error.response?.data?.message || error.message || 'Something went wrong';
    return Promise.reject({ message, status: error.response?.status });
  }
);

export default api;
</file>

<file path="client/src/services/authService.js">
import api from './api';

export const authService = {
  register: async (userData) => {
    const response = await api.post('/auth/register', userData);
    return response.data;
  },

  login: async (email, password) => {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },

  getMe: async () => {
    const response = await api.get('/auth/me');
    return response.data;
  },

  updatePassword: async (currentPassword, newPassword) => {
    const response = await api.put('/auth/updatepassword', {
      currentPassword,
      newPassword
    });
    return response.data;
  }
};
</file>

<file path="client/src/services/fileService.js">
import api from './api';

export const fileService = {
  createFile: async (fileData) => {
    const response = await api.post('/files', fileData);
    return response.data;
  },

  getFile: async (fileId) => {
    const response = await api.get(`/files/${fileId}`);
    return response.data;
  },

  updateFile: async (fileId, updates) => {
    const response = await api.put(`/files/${fileId}`, updates);
    return response.data;
  },

  deleteFile: async (fileId) => {
    const response = await api.delete(`/files/${fileId}`);
    return response.data;
  },

  moveFile: async (fileId, newParentId) => {
    const response = await api.put(`/files/${fileId}/move`, { newParentId });
    return response.data;
  }
};
</file>

<file path="client/src/services/projectService.js">
import api from './api';

export const projectService = {
  createProject: async (projectData) => {
    const response = await api.post('/projects', projectData);
    return response.data;
  },

  getProjects: async (page = 1, limit = 10) => {
    const response = await api.get(`/projects?page=${page}&limit=${limit}`);
    return response.data;
  },

  getProject: async (projectSlug) => {
    const response = await api.get(`/projects/${projectSlug}`);
    return response.data;
  },

  updateProject: async (projectId, updates) => {
    const response = await api.put(`/projects/${projectId}`, updates);
    return response.data;
  },

  deleteProject: async (projectId) => {
    const response = await api.delete(`/projects/${projectId}`);
    return response.data;
  },

  forkProject: async (projectId) => {
    const response = await api.post(`/projects/${projectId}/fork`);
    return response.data;
  }
};
</file>

<file path="client/src/services/storageService.js">
// Storage service for managing localStorage operations

export const storageService = {
  // Save project to localStorage
  saveProject: (projectSlug, projectData) => {
    try {
      localStorage.setItem(`project_${projectSlug}`, JSON.stringify(projectData));
      
      // Also save to projects list
      const projectsList = storageService.getAllProjects();
      const existingIndex = projectsList.findIndex(p => p.projectSlug === projectSlug);
      
      if (existingIndex >= 0) {
        projectsList[existingIndex] = projectData.project;
      } else {
        projectsList.push(projectData.project);
      }
      
      localStorage.setItem('projects_list', JSON.stringify(projectsList));
      return true;
    } catch (error) {
      console.error('Failed to save project:', error);
      return false;
    }
  },

  // Load project from localStorage
  loadProject: (projectSlug) => {
    try {
      const data = localStorage.getItem(`project_${projectSlug}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('Failed to load project:', error);
      return null;
    }
  },

  // Get all projects
  getAllProjects: () => {
    try {
      const data = localStorage.getItem('projects_list');
      return data ? JSON.parse(data) : [];
    } catch (error) {
      console.error('Failed to get projects:', error);
      return [];
    }
  },

  // Delete project
  deleteProject: (projectSlug) => {
    try {
      localStorage.removeItem(`project_${projectSlug}`);
      
      const projectsList = storageService.getAllProjects();
      const filtered = projectsList.filter(p => p.projectSlug !== projectSlug);
      localStorage.setItem('projects_list', JSON.stringify(filtered));
      return true;
    } catch (error) {
      console.error('Failed to delete project:', error);
      return false;
    }
  },

  // Save user settings
  saveSettings: (settings) => {
    try {
      localStorage.setItem('user_settings', JSON.stringify(settings));
      return true;
    } catch (error) {
      console.error('Failed to save settings:', error);
      return false;
    }
  },

  // Load user settings
  loadSettings: () => {
    try {
      const data = localStorage.getItem('user_settings');
      return data ? JSON.parse(data) : {
        theme: 'light',
        autoSave: true,
        fontSize: 14
      };
    } catch (error) {
      console.error('Failed to load settings:', error);
      return {
        theme: 'light',
        autoSave: true,
        fontSize: 14
      };
    }
  },

  // Clear all storage (useful for logout)
  clearAll: () => {
    try {
      localStorage.clear();
      return true;
    } catch (error) {
      console.error('Failed to clear storage:', error);
      return false;
    }
  }
};
</file>

<file path="client/src/utils/constants.js">
export const FILE_EXTENSIONS = {
  JAVASCRIPT: ['js', 'mjs'],
  JSX: ['jsx'],
  TYPESCRIPT: ['ts'],
  TSX: ['tsx'],
  CSS: ['css'],
  SCSS: ['scss', 'sass'],
  HTML: ['html', 'htm'],
  JSON: ['json'],
  MARKDOWN: ['md', 'markdown'],
  TEXT: ['txt'],
  XML: ['xml'],
  YAML: ['yml', 'yaml'],
};

export const LANGUAGE_MAP = {
  js: 'javascript',
  jsx: 'javascript',
  ts: 'typescript',
  tsx: 'typescript',
  css: 'css',
  scss: 'scss',
  html: 'html',
  json: 'json',
  md: 'markdown',
  txt: 'plaintext',
  xml: 'xml',
  yml: 'yaml',
  yaml: 'yaml',
};

export const DEFAULT_PROJECT_STRUCTURE = {
  framework: 'react',
  dependencies: {
    'react': '^18.2.0',
    'react-dom': '^18.2.0'
  }
};

export const THEMES = {
  LIGHT: 'light',
  DARK: 'dark'
};

export const AUTO_SAVE_INTERVAL = 30000; // 30 seconds
</file>

<file path="client/src/utils/fileTemplates.js">
export const fileTemplates = {
  'App.js': `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`,

  'App.css': `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.App-header {
  background-color: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 40px;
  border-radius: 20px;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  color: white;
}

.App-header h1 {
  margin: 0 0 20px 0;
  font-size: 2.5rem;
}

.App-header p {
  margin: 0;
  opacity: 0.9;
  font-size: 1.2rem;
}`,

  // ✅ CRITICAL FIX: Use named import { createRoot }
  'index.js': `import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,

  'index.css': `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`,

  'index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio Project" />
    <title>CipherStudio Project</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,

  'package.json': `{
  "name": "cipherstudio-project",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}`
};
</file>

<file path="client/src/utils/helpers.js">
import { nanoid } from 'nanoid';
import { fileTemplates } from './fileTemplates';

export const generateId = () => nanoid();

export const getFileExtension = (filename) => {
    const parts = filename.split('.');
    return parts.length > 1 ? parts[parts.length - 1] : '';
};

export const getFileLanguage = (extension) => {
    const languageMap = {
        js: 'javascript',
        jsx: 'jsx',
        ts: 'typescript',
        tsx: 'typescript',
        css: 'css',
        html: 'html',
        json: 'json',
        md: 'markdown'
    };
    return languageMap[extension] || 'javascript';
};

// NEW FUNCTION: Create default project file structure
export const createDefaultProjectFiles = (projectId, projectName) => {
    const rootId = generateId();
    const srcId = generateId();
    const publicId = generateId();

    const defaultFiles = [
        // Root folder
        {
            _id: rootId,
            projectId,
            parentId: null,
            name: projectName,
            type: 'folder',
            path: '/',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // src folder
        {
            _id: srcId,
            projectId,
            parentId: rootId,
            name: 'src',
            type: 'folder',
            path: '/src',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // public folder
        {
            _id: publicId,
            projectId,
            parentId: rootId,
            name: 'public',
            type: 'folder',
            path: '/public',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // App.js
        {
            _id: generateId(),
            projectId,
            parentId: srcId,
            name: 'App.js',
            type: 'file',
            extension: 'js',
            path: '/src/App.js',
            language: 'javascript',
            content: fileTemplates['App.js'] || `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`,
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // App.css
        {
            _id: generateId(),
            projectId,
            parentId: srcId,
            name: 'App.css',
            type: 'file',
            extension: 'css',
            path: '/src/App.css',
            language: 'css',
            content: fileTemplates['App.css'] || `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  border-radius: 10px;
  color: white;
}

.App-header h1 {
  margin: 0 0 10px 0;
}

.App-header p {
  margin: 0;
  opacity: 0.8;
}`,
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // index.js
        {
            _id: generateId(),
            projectId,
            parentId: srcId,
            name: 'index.js',
            type: 'file',
            extension: 'js',
            path: '/src/index.js',
            language: 'javascript',
            // ✅ CRITICAL FIX HERE - Use named import
            content: `import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // index.css
        {
            _id: generateId(),
            projectId,
            parentId: srcId,
            name: 'index.css',
            type: 'file',
            extension: 'css',
            path: '/src/index.css',
            language: 'css',
            content: fileTemplates['index.css'] || `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  box-sizing: border-box;
}`,
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // index.html
        {
            _id: generateId(),
            projectId,
            parentId: publicId,
            name: 'index.html',
            type: 'file',
            extension: 'html',
            path: '/public/index.html',
            language: 'html',
            content: fileTemplates['index.html'] || `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio - Browser-based React IDE" />
    <title>CipherStudio</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        },
        // package.json
        {
            _id: generateId(),
            projectId,
            parentId: rootId,
            name: 'package.json',
            type: 'file',
            extension: 'json',
            path: '/package.json',
            language: 'json',
            content: fileTemplates['package.json'] || JSON.stringify({
                name: projectName.toLowerCase().replace(/\s+/g, '-'),
                version: '0.1.0',
                private: true,
                dependencies: {
                    'react': '^18.2.0',
                    'react-dom': '^18.2.0'
                }
            }, null, 2),
            sizeInBytes: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        }
    ];

    return defaultFiles;
};
</file>

<file path="client/src/utils/validators.js">
export const validateEmail = (email) => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

export const validatePassword = (password) => {
  return password.length >= 6;
};

export const validateProjectName = (name) => {
  return name.length > 0 && name.length <= 50;
};

export const validateFileName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};

export const validateFolderName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};
</file>

<file path="client/tailwind.config.js">
// client/tailwind.config.js
export default {
  darkMode: 'class', // enables Tailwind's dark mode toggle via class
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: {
    extend: {
      colors: {
        dark: {
          50: '#1e1e1e',
          100: '#2a2a2a',
          200: '#333333',
          300: '#3d3d3d',
          400: '#555555',
          500: '#777777',
          600: '#999999',
        },
        primary: {
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
        },
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="client/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true
      }
    }
  }
})
</file>

<file path="server/package.json">
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "aws-sdk": "^2.1692.0",
    "bcryptjs": "^3.0.2",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "dotenv": "^17.2.3",
    "express": "^5.1.0",
    "express-rate-limit": "^8.1.0",
    "express-validator": "^7.3.0",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.19.2",
    "morgan": "^1.10.1",
    "multer": "^2.0.2",
    "multer-s3": "^3.0.1"
  }
}
</file>

<file path="server/server.js">
const dotenv = require('dotenv');
dotenv.config();

const app = require('./src/app');
const connectDB = require('./src/config/database');

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
  console.error('UNCAUGHT EXCEPTION! 💥 Shutting down...');
  console.error(err.name, err.message);
  process.exit(1);
});

// Connect to MongoDB
connectDB();

const PORT = process.env.PORT || 5000;

const server = app.listen(PORT, () => {
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`);
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('UNHANDLED REJECTION! 💥 Shutting down...');
  console.error(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});
</file>

<file path="server/src/app.js">
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const corsOptions = require('./config/cors');
const errorHandler = require('./middleware/errorHandler');
const routes = require('./routes');

const app = express();

// Security middleware
app.use(helmet());

// CORS
app.use(cors(corsOptions));

// Body parser
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Compression
app.use(compression());

// Logging
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// Health check
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK', message: 'Server is running' });
});

// API routes
app.use('/api', routes);

// Handle 404
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});



// Global error handler
app.use(errorHandler);

module.exports = app;
</file>

<file path="server/src/config/aws.js">
const AWS = require('aws-sdk');
const multer = require('multer');
const multerS3 = require('multer-s3');

// Configure AWS
AWS.config.update({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION
});

const s3 = new AWS.S3();

// Multer S3 configuration
const upload = multer({
  storage: multerS3({
    s3: s3,
    bucket: process.env.AWS_S3_BUCKET,
    acl: 'private',
    metadata: function (req, file, cb) {
      cb(null, { fieldName: file.fieldname });
    },
    key: function (req, file, cb) {
      const projectId = req.params.projectId || 'temp';
      const fileName = `projects/${projectId}/${Date.now()}-${file.originalname}`;
      cb(null, fileName);
    }
  }),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  }
});

module.exports = { s3, upload };
</file>

<file path="server/src/config/cors.js">
const corsOptions = {
  origin: function (origin, callback) {
    const allowedOrigins = [
      process.env.CLIENT_URL,
      'http://localhost:3000',
      'http://localhost:5173'
    ];

    // Allow requests with no origin (mobile apps, Postman, etc.)
    if (!origin) return callback(null, true);

    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

module.exports = corsOptions;
</file>

<file path="server/src/config/database.js">
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });

    console.log(`MongoDB Connected: ${conn.connection.host}`);

    // Handle connection events
    mongoose.connection.on('error', (err) => {
      console.error(`MongoDB connection error: ${err}`);
    });

    mongoose.connection.on('disconnected', () => {
      console.warn('MongoDB disconnected');
    });

  } catch (error) {
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
};

module.exports = connectDB;
</file>

<file path="server/src/controllers/authController.js">
const User = require('../models/User');
const { validationResult } = require('express-validator');

// @desc    Register user
// @route   POST /api/auth/register
const register = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ 
        success: false, 
        errors: errors.array() 
      });
    }

    const { firstName, lastName, email, password, mobile } = req.body;

    // Check if user exists
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({
        success: false,
        message: 'User already exists with this email'
      });
    }

    // Create user
    const user = await User.create({
      firstName,
      lastName,
      email,
      password,
      mobile
    });

    // Generate token
    const token = user.generateToken();

    res.status(201).json({
      success: true,
      message: 'User registered successfully',
      data: {
        id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        token
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Login user
// @route   POST /api/auth/login
const login = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ 
        success: false, 
        errors: errors.array() 
      });
    }

    const { email, password } = req.body;

    // Check user exists
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Invalid credentials'
      });
    }

    // Check password
    const isPasswordMatch = await user.comparePassword(password);
    if (!isPasswordMatch) {
      return res.status(401).json({
        success: false,
        message: 'Invalid credentials'
      });
    }

    // Update last login
    user.lastLoggedIn = Date.now();
    await user.save();

    // Generate token
    const token = user.generateToken();

    res.status(200).json({
      success: true,
      message: 'Login successful',
      data: {
        id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        settings: user.settings,
        token
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get current user
// @route   GET /api/auth/me
const getMe = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id);
    
    res.status(200).json({
      success: true,
      data: user
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Update password
// @route   PUT /api/auth/updatepassword
const updatePassword = async (req, res, next) => {
  try {
    const { currentPassword, newPassword } = req.body;

    const user = await User.findById(req.user.id).select('+password');

    // Check current password
    const isPasswordMatch = await user.comparePassword(currentPassword);
    if (!isPasswordMatch) {
      return res.status(401).json({
        success: false,
        message: 'Current password is incorrect'
      });
    }

    user.password = newPassword;
    await user.save();

    const token = user.generateToken();

    res.status(200).json({
      success: true,
      message: 'Password updated successfully',
      data: { token }
    });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  register,
  login,
  getMe,
  updatePassword
};
</file>

<file path="server/src/controllers/fileController.js">
const File = require('../models/File');
const Project = require('../models/Project');
const { s3 } = require('../config/aws');

// @desc    Create file or folder
// @route   POST /api/files
const createFile = async (req, res, next) => {
  try {
    const { 
      projectId, 
      parentId, 
      name, 
      type, 
      content = '' 
    } = req.body;

    // Verify project exists
    const project = await Project.findById(projectId);
    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }

    // Build path
    let path = '/';
    if (parentId) {
      const parent = await File.findById(parentId);
      if (!parent || parent.type !== 'folder') {
        return res.status(400).json({
          success: false,
          message: 'Invalid parent folder'
        });
      }
      path = parent.path === '/' ? `/${name}` : `${parent.path}/${name}`;
    } else {
      path = `/${name}`;
    }

    // Extract extension for files
    let extension = '';
    if (type === 'file') {
      const parts = name.split('.');
      extension = parts.length > 1 ? parts.pop() : 'txt';
    }

    // Create file
    const file = await File.create({
      projectId,
      parentId,
      name,
      type,
      extension,
      path,
      content: type === 'file' ? content : undefined
    });

    // Update project timestamp
    project.updatedAt = Date.now();
    await project.save();

    res.status(201).json({
      success: true,
      message: `${type === 'folder' ? 'Folder' : 'File'} created successfully`,
      data: file
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get file content
// @route   GET /api/files/:id
const getFile = async (req, res, next) => {
  try {
    const { id } = req.params;

    const file = await File.findById(id);

    if (!file) {
      return res.status(404).json({
        success: false,
        message: 'File not found'
      });
    }

    // If file is stored in S3, get it from there
    if (file.s3Key) {
      const params = {
        Bucket: process.env.AWS_S3_BUCKET,
        Key: file.s3Key
      };

      const data = await s3.getObject(params).promise();
      file.content = data.Body.toString('utf-8');
    }

    res.status(200).json({
      success: true,
      data: file
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Update file
// @route   PUT /api/files/:id
const updateFile = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { name, content } = req.body;

    const file = await File.findById(id);

    if (!file) {
      return res.status(404).json({
        success: false,
        message: 'File not found'
      });
    }

    // Update fields
    if (name) {
      file.name = name;
      
      // Update extension if file
      if (file.type === 'file') {
        const parts = name.split('.');
        file.extension = parts.length > 1 ? parts.pop() : file.extension;
      }

      // Update path
      const pathParts = file.path.split('/');
      pathParts[pathParts.length - 1] = name;
      file.path = pathParts.join('/');
    }

    if (content !== undefined && file.type === 'file') {
      file.content = content;
      
      // If file is in S3, update it
      if (file.s3Key) {
        await s3.putObject({
          Bucket: process.env.AWS_S3_BUCKET,
          Key: file.s3Key,
          Body: content
        }).promise();
      }
    }

    await file.save();

    // Update project timestamp
    await Project.findByIdAndUpdate(file.projectId, {
      updatedAt: Date.now()
    });

    res.status(200).json({
      success: true,
      message: 'File updated successfully',
      data: file
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Delete file or folder
// @route   DELETE /api/files/:id
const deleteFile = async (req, res, next) => {
  try {
    const { id } = req.params;

    const file = await File.findById(id);

    if (!file) {
      return res.status(404).json({
        success: false,
        message: 'File not found'
      });
    }

    // If it's a folder, delete all children
    if (file.type === 'folder') {
      await deleteChildrenRecursively(id);
    }

    // If file is in S3, delete it
    if (file.s3Key) {
      await s3.deleteObject({
        Bucket: process.env.AWS_S3_BUCKET,
        Key: file.s3Key
      }).promise();
    }

    // Soft delete
    file.isDeleted = true;
    await file.save();

    // Update project timestamp
    await Project.findByIdAndUpdate(file.projectId, {
      updatedAt: Date.now()
    });

    res.status(200).json({
      success: true,
      message: `${file.type === 'folder' ? 'Folder' : 'File'} deleted successfully`
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Move file or folder
// @route   PUT /api/files/:id/move
const moveFile = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { newParentId } = req.body;

    const file = await File.findById(id);

    if (!file) {
      return res.status(404).json({
        success: false,
        message: 'File not found'
      });
    }

    // Verify new parent
    let newPath = '/';
    if (newParentId) {
      const newParent = await File.findById(newParentId);
      if (!newParent || newParent.type !== 'folder') {
        return res.status(400).json({
          success: false,
          message: 'Invalid destination folder'
        });
      }
      newPath = newParent.path === '/' 
        ? `/${file.name}` 
        : `${newParent.path}/${file.name}`;
    } else {
      newPath = `/${file.name}`;
    }

    // Update file
    file.parentId = newParentId;
    file.path = newPath;
    await file.save();

    // If it's a folder, update all children paths
    if (file.type === 'folder') {
      await updateChildrenPaths(id, newPath);
    }

    res.status(200).json({
      success: true,
      message: 'File moved successfully',
      data: file
    });
  } catch (error) {
    next(error);
  }
};

// Helper function to delete children recursively
async function deleteChildrenRecursively(parentId) {
  const children = await File.find({ parentId, isDeleted: false });
  
  for (const child of children) {
    if (child.type === 'folder') {
      await deleteChildrenRecursively(child._id);
    }
    
    if (child.s3Key) {
      await s3.deleteObject({
        Bucket: process.env.AWS_S3_BUCKET,
        Key: child.s3Key
      }).promise();
    }
    
    child.isDeleted = true;
    await child.save();
  }
}

// Helper function to update children paths
async function updateChildrenPaths(parentId, parentPath) {
  const children = await File.find({ parentId, isDeleted: false });
  
  for (const child of children) {
    child.path = parentPath === '/' 
      ? `/${child.name}` 
      : `${parentPath}/${child.name}`;
    await child.save();
    
    if (child.type === 'folder') {
      await updateChildrenPaths(child._id, child.path);
    }
  }
}

module.exports = {
  createFile,
  getFile,
  updateFile,
  deleteFile,
  moveFile
};
</file>

<file path="server/src/controllers/projectController.js">
const Project = require('../models/Project');
const File = require('../models/File');
const { s3 } = require('../config/aws');
const { createDefaultFiles } = require('../utils/projectHelpers');

// @desc    Create new project
// @route   POST /api/projects
const createProject = async (req, res, next) => {
  try {
    const { name, description, framework, visibility } = req.body;
    const userId = req.user?.id || null;

    // Create project
    const project = await Project.create({
      userId,
      name,
      description,
      framework: framework || 'react',
      visibility: visibility || (userId ? 'private' : 'public')
    });

    // Create root folder
    const rootFolder = await File.create({
      projectId: project._id,
      parentId: null,
      name: project.name,
      type: 'folder',
      path: '/'
    });

    // Update project with root folder
    project.rootFolderId = rootFolder._id;
    await project.save();

    // Create default files
    await createDefaultFiles(project._id, rootFolder._id);

    res.status(201).json({
      success: true,
      message: 'Project created successfully',
      data: project
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get all projects for user
// @route   GET /api/projects
const getProjects = async (req, res, next) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 10 } = req.query;

    const query = { userId };

    const projects = await Project.find(query)
      .sort({ updatedAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const count = await Project.countDocuments(query);

    res.status(200).json({
      success: true,
      data: projects,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(count / limit),
        totalProjects: count
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get single project
// @route   GET /api/projects/:projectSlug
const getProject = async (req, res, next) => {
  try {
    const { projectSlug } = req.params;
    
    const project = await Project.findOne({ projectSlug });

    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }

    // Check authorization for private projects
    if (project.visibility === 'private' && 
        (!req.user || project.userId.toString() !== req.user.id)) {
      return res.status(403).json({
        success: false,
        message: 'Not authorized to access this project'
      });
    }

    // Get project files
    const files = await File.find({ 
      projectId: project._id, 
      isDeleted: false 
    });

    res.status(200).json({
      success: true,
      data: {
        project,
        files
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Update project
// @route   PUT /api/projects/:id
const updateProject = async (req, res, next) => {
  try {
    const { id } = req.params;
    const updates = req.body;

    const project = await Project.findById(id);

    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }

    // Check authorization
    if (project.userId && project.userId.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'Not authorized to update this project'
      });
    }

    // Update project
    Object.assign(project, updates);
    await project.save();

    res.status(200).json({
      success: true,
      message: 'Project updated successfully',
      data: project
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Delete project
// @route   DELETE /api/projects/:id
const deleteProject = async (req, res, next) => {
  try {
    const { id } = req.params;

    const project = await Project.findById(id);

    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }

    // Check authorization
    if (project.userId && project.userId.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'Not authorized to delete this project'
      });
    }

    // Delete all files from S3
    const files = await File.find({ projectId: id, type: 'file' });
    for (const file of files) {
      if (file.s3Key) {
        await s3.deleteObject({
          Bucket: process.env.AWS_S3_BUCKET,
          Key: file.s3Key
        }).promise();
      }
    }

    // Delete all files from database
    await File.deleteMany({ projectId: id });

    // Delete project
    await project.deleteOne();

    res.status(200).json({
      success: true,
      message: 'Project deleted successfully'
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Fork project
// @route   POST /api/projects/:id/fork
const forkProject = async (req, res, next) => {
  try {
    const { id } = req.params;

    const originalProject = await Project.findById(id);
    if (!originalProject) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }

    // Create new project
    const forkedProject = await Project.create({
      userId: req.user.id,
      name: `${originalProject.name} (forked)`,
      description: originalProject.description,
      framework: originalProject.framework,
      dependencies: originalProject.dependencies,
      visibility: 'private'
    });

    // Copy files
    const originalFiles = await File.find({ 
      projectId: id, 
      isDeleted: false 
    });

    const fileMapping = new Map();

    // First pass: Create all files/folders
    for (const file of originalFiles) {
      const newFile = await File.create({
        projectId: forkedProject._id,
        parentId: file.parentId ? fileMapping.get(file.parentId.toString()) : null,
        name: file.name,
        type: file.type,
        extension: file.extension,
        path: file.path,
        content: file.content,
        language: file.language
      });

      fileMapping.set(file._id.toString(), newFile._id);

      if (file.parentId === null) {
        forkedProject.rootFolderId = newFile._id;
        await forkedProject.save();
      }
    }

    res.status(201).json({
      success: true,
      message: 'Project forked successfully',
      data: forkedProject
    });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  createProject,
  getProjects,
  getProject,
  updateProject,
  deleteProject,
  forkProject
};
</file>

<file path="server/src/controllers/userController.js">
const User = require('../models/User');
const Project = require('../models/Project');

// @desc    Get user profile
// @route   GET /api/users/profile
const getUserProfile = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    const projectCount = await Project.countDocuments({ userId: user._id });

    res.status(200).json({
      success: true,
      data: {
        user,
        stats: {
          projectCount
        }
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Update user profile
// @route   PUT /api/users/profile
const updateUserProfile = async (req, res, next) => {
  try {
    const { firstName, lastName, mobile } = req.body;

    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Update fields
    if (firstName) user.firstName = firstName;
    if (lastName) user.lastName = lastName;
    if (mobile) user.mobile = mobile;

    await user.save();

    res.status(200).json({
      success: true,
      message: 'Profile updated successfully',
      data: user
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Update user settings
// @route   PUT /api/users/settings
const updateUserSettings = async (req, res, next) => {
  try {
    const { theme, autoSave, fontSize } = req.body;

    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Update settings
    if (theme) user.settings.theme = theme;
    if (autoSave !== undefined) user.settings.autoSave = autoSave;
    if (fontSize) user.settings.fontSize = fontSize;

    await user.save();

    res.status(200).json({
      success: true,
      message: 'Settings updated successfully',
      data: user.settings
    });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  getUserProfile,
  updateUserProfile,
  updateUserSettings
};
</file>

<file path="server/src/middleware/auth.js">
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  let token;

  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    token = req.headers.authorization.split(' ')[1];
  }

  if (!token) {
    return res.status(401).json({
      success: false,
      message: 'Not authorized to access this route'
    });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id);
    next();
  } catch (error) {
    return res.status(401).json({
      success: false,
      message: 'Not authorized to access this route'
    });
  }
};

// Optional auth - doesn't require token but adds user if present
const optionalAuth = async (req, res, next) => {
  let token;

  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    token = req.headers.authorization.split(' ')[1];
  }

  if (token) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = await User.findById(decoded.id);
    } catch (error) {
      // Token invalid, but continue without user
      req.user = null;
    }
  }

  next();
};

module.exports = { protect, optionalAuth };
</file>

<file path="server/src/middleware/errorHandler.js">
const errorHandler = (err, req, res, next) => {
  let error = { ...err };
  error.message = err.message;

  // Log error
  console.error(err);

  // Mongoose bad ObjectId
  if (err.name === 'CastError') {
    const message = 'Resource not found';
    error = { message, statusCode: 404 };
  }

  // Mongoose duplicate key
  if (err.code === 11000) {
    const field = Object.keys(err.keyValue)[0];
    const message = `Duplicate field value: ${field}`;
    error = { message, statusCode: 400 };
  }

  // Mongoose validation error
  if (err.name === 'ValidationError') {
    const message = Object.values(err.errors)
      .map(val => val.message)
      .join(', ');
    error = { message, statusCode: 400 };
  }

  res.status(error.statusCode || 500).json({
    success: false,
    message: error.message || 'Server Error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
};

module.exports = errorHandler;
</file>

<file path="server/src/middleware/rateLimiter.js">
const rateLimit = require('express-rate-limit');

// General rate limiter
const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

// Auth rate limiter (stricter)
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 requests per windowMs
  message: 'Too many authentication attempts, please try again later.',
  skipSuccessfulRequests: true
});

// File upload limiter
const uploadLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 20, // limit each IP to 20 uploads per windowMs
  message: 'Too many file uploads, please try again later.'
});

module.exports = {
  generalLimiter,
  authLimiter,
  uploadLimiter
};
</file>

<file path="server/src/middleware/validation.js">
const { body, param, query, validationResult } = require('express-validator');

// Auth validation
const validateRegister = [
  body('firstName').notEmpty().withMessage('First name is required'),
  body('lastName').notEmpty().withMessage('Last name is required'),
  body('email').isEmail().withMessage('Please provide a valid email'),
  body('password')
    .isLength({ min: 6 })
    .withMessage('Password must be at least 6 characters')
];

const validateLogin = [
  body('email').isEmail().withMessage('Please provide a valid email'),
  body('password').notEmpty().withMessage('Password is required')
];

// Project validation
const validateCreateProject = [
  body('name')
    .notEmpty()
    .withMessage('Project name is required')
    .isLength({ max: 50 })
    .withMessage('Project name must be less than 50 characters'),
  body('framework')
    .optional()
    .isIn(['react', 'vue', 'vanilla'])
    .withMessage('Invalid framework')
];

// File validation
const validateCreateFile = [
  body('projectId').isMongoId().withMessage('Invalid project ID'),
  body('name').notEmpty().withMessage('File/folder name is required'),
  body('type')
    .isIn(['file', 'folder'])
    .withMessage('Type must be either file or folder')
];

// Validation error handler
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array()
    });
  }
  next();
};

module.exports = {
  validateRegister,
  validateLogin,
  validateCreateProject,
  validateCreateFile,
  handleValidationErrors
};
</file>

<file path="server/src/models/File.js">
const mongoose = require('mongoose');

const fileSchema = new mongoose.Schema({
  projectId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Project',
    required: true,
    index: true
  },
  parentId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'File',
    default: null
  },
  name: {
    type: String,
    required: [true, 'Please provide file/folder name'],
    trim: true
  },
  type: {
    type: String,
    enum: ['file', 'folder'],
    required: true
  },
  extension: {
    type: String,
    required: function() {
      return this.type === 'file';
    }
  },
  path: {
    type: String,
    required: true
  },
  content: {
    type: String,
    default: '',
    // required: function() {
    //   return this.type === 'file' && !this.s3Key;
    // }
  },
  s3Key: {
    type: String,
    sparse: true
  },
  language: {
    type: String,
    enum: ['javascript', 'jsx', 'css', 'html', 'json', 'markdown'],
    // required: function() {
    //   return this.type === 'file';
    // }
  },
  sizeInBytes: {
    type: Number,
    default: 0
  },
  isDeleted: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Update timestamps
fileSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  
  // Calculate size for file content
  if (this.type === 'file' && this.content) {
    this.sizeInBytes = Buffer.byteLength(this.content, 'utf8');
  }
  
  // Set language based on extension
  if (this.type === 'file' && !this.language) {
    const extMap = {
      'js': 'javascript',
      'jsx': 'jsx',
      'css': 'css',
      'html': 'html',
      'json': 'json',
      'md': 'markdown'
    };
    this.language = extMap[this.extension] || 'javascript';
  }
  
  next();
});

// Compound indexes for efficient queries
fileSchema.index({ projectId: 1, parentId: 1 });
fileSchema.index({ projectId: 1, path: 1 });
fileSchema.index({ projectId: 1, isDeleted: 1 });

module.exports = mongoose.model('File', fileSchema);
</file>

<file path="server/src/models/Project.js">
const mongoose = require('mongoose');

const projectSchema = new mongoose.Schema({
  projectSlug: {
    type: String,
    unique: true,
    // required: true,
    // index: true
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: function() {
      return this.visibility === 'private';
    }
  },
  name: {
    type: String,
    required: [true, 'Please provide project name'],
    trim: true
  },
  description: {
    type: String,
    trim: true
  },
  rootFolderId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'File'
  },
  framework: {
    type: String,
    default: 'react',
    enum: ['react', 'vue', 'vanilla']
  },
  visibility: {
    type: String,
    default: 'private',
    enum: ['public', 'private']
  },
  settings: {
    autoSave: {
      type: Boolean,
      default: true
    },
    autoRefresh: {
      type: Boolean,
      default: true
    }
  },
  lastOpenedFile: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'File'
  },
  dependencies: {
    type: Map,
    of: String,
    default: {
      'react': '^18.2.0',
      'react-dom': '^18.2.0'
    }
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Generate unique project slug
projectSchema.pre('save', async function(next) {
  if (this.isNew) {
    const randomString = Math.random().toString(36).substring(2, 10);
    this.projectSlug = `${this.name.toLowerCase().replace(/\s+/g, '-')}-${randomString}`;
  }
  this.updatedAt = Date.now();
  next();
});

// Index for faster queries
projectSchema.index({ userId: 1, createdAt: -1 });
// projectSchema.index({ projectSlug: 1 });

module.exports = mongoose.model('Project', projectSchema);
</file>

<file path="server/src/models/User.js">
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const userSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: [true, 'Please provide first name'],
    trim: true
  },
  lastName: {
    type: String,
    required: [true, 'Please provide last name'],
    trim: true
  },
  email: {
    type: String,
    required: [true, 'Please provide email'],
    unique: true,
    lowercase: true,
    match: [
      /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
      'Please provide a valid email'
    ],
    index: true
  },
  password: {
    type: String,
    required: [true, 'Please provide password'],
    minlength: 6,
    select: false
  },
  mobile: {
    type: String,
    trim: true
  },
  settings: {
    theme: {
      type: String,
      enum: ['light', 'dark'],
      default: 'light'
    },
    autoSave: {
      type: Boolean,
      default: true
    },
    fontSize: {
      type: Number,
      default: 14
    }
  },
  lastLoggedIn: Date,
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Hash password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) {
    next();
  }
  
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Update timestamps
userSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// Compare passwords
userSchema.methods.comparePassword = async function(enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

// Generate JWT token
userSchema.methods.generateToken = function() {
  return jwt.sign(
    { id: this._id, email: this.email },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRE }
  );
};

module.exports = mongoose.model('User', userSchema);
</file>

<file path="server/src/routes/authRoutes.js">
const express = require('express');
const router = express.Router();
const {
  register,
  login,
  getMe,
  updatePassword
} = require('../controllers/authController');
const { protect } = require('../middleware/auth');
const { authLimiter } = require('../middleware/rateLimiter');
const {
  validateRegister,
  validateLogin,
  handleValidationErrors
} = require('../middleware/validation');

router.post(
  '/register',
  authLimiter,
  validateRegister,
  handleValidationErrors,
  register
);

router.post(
  '/login',
  authLimiter,
  validateLogin,
  handleValidationErrors,
  login
);

router.get('/me', protect, getMe);
router.put('/updatepassword', protect, updatePassword);

module.exports = router;
</file>

<file path="server/src/routes/fileRoutes.js">
const express = require('express');
const router = express.Router();
const {
  createFile,
  getFile,
  updateFile,
  deleteFile,
  moveFile
} = require('../controllers/fileController');
const { protect, optionalAuth } = require('../middleware/auth');
const {
  validateCreateFile,
  handleValidationErrors
} = require('../middleware/validation');
const { uploadLimiter } = require('../middleware/rateLimiter');

router
  .route('/')
  .post(
    optionalAuth,
    uploadLimiter,
    validateCreateFile,
    handleValidationErrors,
    createFile
  );

router
  .route('/:id')
  .get(optionalAuth, getFile)
  .put(optionalAuth, updateFile)
  .delete(optionalAuth, deleteFile);

router.put('/:id/move', optionalAuth, moveFile);

module.exports = router;
</file>

<file path="server/src/routes/index.js">
const express = require('express');
const router = express.Router();

const authRoutes = require('./authRoutes');
const projectRoutes = require('./projectRoutes');
const fileRoutes = require('./fileRoutes');
const userRoutes = require('./userRoutes');

// Mount routes
router.use('/auth', authRoutes);
router.use('/projects', projectRoutes);
router.use('/files', fileRoutes);
router.use('/users', userRoutes);

module.exports = router;
</file>

<file path="server/src/routes/projectRoutes.js">
const express = require('express');
const router = express.Router();
const {
  createProject,
  getProjects,
  getProject,
  updateProject,
  deleteProject,
  forkProject
} = require('../controllers/projectController');
const { protect, optionalAuth } = require('../middleware/auth');
const {
  validateCreateProject,
  handleValidationErrors
} = require('../middleware/validation');

router
  .route('/')
  .get(protect, getProjects) // <-- FIX: Use protect
  .post(
    protect, // <-- FIX: Also protect creation
    validateCreateProject,
    handleValidationErrors,
    createProject
  );

router
  .route('/:projectSlug')
  .get(optionalAuth, getProject);

router
  .route('/:id')
  .put(protect, updateProject)
  .delete(protect, deleteProject);

router.post('/:id/fork', protect, forkProject);

module.exports = router;
</file>

<file path="server/src/routes/userRoutes.js">
const express = require('express');
const router = express.Router();
const {
  getUserProfile,
  updateUserProfile,
  updateUserSettings
} = require('../controllers/userController');
const { protect } = require('../middleware/auth');

router
  .route('/profile')
  .get(protect, getUserProfile)
  .put(protect, updateUserProfile);

router.put('/settings', protect, updateUserSettings);

module.exports = router;
</file>

<file path="server/src/utils/constants.js">
module.exports = {
  FILE_TYPES: {
    FILE: 'file',
    FOLDER: 'folder'
  },
  
  FRAMEWORKS: {
    REACT: 'react',
    VUE: 'vue',
    VANILLA: 'vanilla'
  },
  
  LANGUAGES: {
    JAVASCRIPT: 'javascript',
    JSX: 'jsx',
    CSS: 'css',
    HTML: 'html',
    JSON: 'json',
    MARKDOWN: 'markdown'
  },
  
  FILE_EXTENSIONS: {
    js: 'javascript',
    jsx: 'jsx',
    css: 'css',
    html: 'html',
    json: 'json',
    md: 'markdown'
  },
  
  MAX_FILE_SIZE: 5 * 1024 * 1024, // 5MB
  
  DEFAULT_DEPENDENCIES: {
    react: {
      'react': '^18.2.0',
      'react-dom': '^18.2.0'
    },
    vue: {
      'vue': '^3.3.0'
    },
    vanilla: {}
  }
};
</file>

<file path="server/src/utils/projectHelpers.js">
const File = require('../models/File');

const createDefaultFiles = async (projectId, rootFolderId) => {
    // Create src folder
    const srcFolder = await File.create({
        projectId,
        parentId: rootFolderId,
        name: 'src',
        type: 'folder',
        path: '/src'
    });

    // Create public folder
    const publicFolder = await File.create({
        projectId,
        parentId: rootFolderId,
        name: 'public',
        type: 'folder',
        path: '/public'
    });

    // Create App.js
    await File.create({
        projectId,
        parentId: srcFolder._id,
        name: 'App.js',
        type: 'file',
        extension: 'js',
        path: '/src/App.js',
        language: 'javascript',
        content: `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`
    });

    // Create App.css
    await File.create({
        projectId,
        parentId: srcFolder._id,
        name: 'App.css',
        type: 'file',
        extension: 'css',
        path: '/src/App.css',
        language: 'css',
        content: `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  border-radius: 10px;
  color: white;
}

.App-header h1 {
  margin: 0 0 10px 0;
}

.App-header p {
  margin: 0;
  opacity: 0.8;
}`
    });

    // Create index.js
    // Create index.js
    await File.create({
        projectId,
        parentId: srcFolder._id,
        name: 'index.js',
        type: 'file',
        extension: 'js',
        path: '/src/index.js',
        language: 'javascript',
        // ✅ CORRECTED CONTENT
        content: `import React from 'react';
import { createRoot } from 'react-dom/client'; // <--- CORRECTED
import './index.css';
import App from './App';

const root = createRoot(document.getElementById('root')); // <--- CORRECTED
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`
    });

    // Create index.css
    await File.create({
        projectId,
        parentId: srcFolder._id,
        name: 'index.css',
        type: 'file',
        extension: 'css',
        path: '/src/index.css',
        language: 'css',
        content: `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  box-sizing: border-box;
}`
    });

    // Create index.html
    await File.create({
        projectId,
        parentId: publicFolder._id,
        name: 'index.html',
        type: 'file',
        extension: 'html',
        path: '/public/index.html',
        language: 'html',
        content: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio - Browser-based React IDE" />
    <title>CipherStudio</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`
    });

    // Create package.json
    await File.create({
        projectId,
        parentId: rootFolderId,
        name: 'package.json',
        type: 'file',
        extension: 'json',
        path: '/package.json',
        language: 'json',
        content: JSON.stringify({
            name: 'cipherstudio-project',
            version: '0.1.0',
            private: true,
            dependencies: {
                'react': '^18.2.0',
                'react-dom': '^18.2.0'
            }
        }, null, 2)
    });
};

module.exports = {
    createDefaultFiles
};
</file>

<file path=".gitignore">
<<<<<<< HEAD
# dependencies
/node_modules

# environment variables
.env
.env.local
.env.development
.env.production
.env.test

# build output
/build
/dist

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# editor settings
.vscode/
.idea/
.DS_Store

# system files
Thumbs.db

# optional: lock files (if you don’t want to commit them)
# package-lock.json
# yarn.lock
=======
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.*
!.env.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Sveltekit cache directory
.svelte-kit/

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Firebase cache directory
.firebase/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v3
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Vite logs files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
>>>>>>> 66b795a159cdf3c8997c807feb79b18741d392d6
</file>

<file path="server/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

</files>
