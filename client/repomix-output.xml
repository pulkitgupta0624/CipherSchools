This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/assets/styles/global.css
src/components/Common/Button.jsx
src/components/Common/Loader.jsx
src/components/Common/Modal.jsx
src/components/Common/ProtectedRoute.jsx
src/components/Common/ThemeToggle.jsx
src/components/Editor/CodeEditor.jsx
src/components/Editor/EditorTabs.jsx
src/components/FileExplorer/FileExplorer.jsx
src/components/FileExplorer/FileIcons.jsx
src/components/FileExplorer/FileTree.jsx
src/components/FileExplorer/FileTreeNode.jsx
src/components/Layout/Header.jsx
src/components/Layout/IDEHeader.jsx
src/components/Preview/SandpackPreview.jsx
src/contexts/AuthContext.jsx
src/contexts/ProjectContext.jsx
src/contexts/ThemeContext.jsx
src/hooks/useDebounce.js
src/hooks/useLocalStorage.js
src/index.css
src/main.jsx
src/pages/Dashboard.jsx
src/pages/IDE.jsx
src/pages/Login.jsx
src/pages/NotFound.jsx
src/pages/Register.jsx
src/services/api.js
src/services/authService.js
src/services/fileService.js
src/services/projectService.js
src/services/storageService.js
src/utils/constants.js
src/utils/fileTemplates.js
src/utils/helpers.js
src/utils/validators.js
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>client</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@codesandbox/sandpack-react": "^2.20.0",
    "@codesandbox/sandpack-themes": "^2.0.21",
    "@monaco-editor/react": "^4.7.0",
    "@tailwindcss/vite": "^4.1.16",
    "axios": "^1.12.2",
    "clsx": "^2.1.1",
    "nanoid": "^5.1.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hotkeys-hook": "^5.2.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.9.4",
    "react-split": "^2.0.14",
    "react-toastify": "^11.0.5",
    "tailwindcss": "^4.1.16",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.css">
/* Split pane divider (gutter) styling */
.gutter {
  background-color: #2d2d2d;
  cursor: col-resize;
  width: 6px;
  transition: background-color 0.2s ease;
}
.gutter:hover {
  background-color: #4a4a4a;
}
</file>

<file path="src/App.jsx">
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { ThemeProvider } from './contexts/ThemeContext';
import Dashboard from './pages/Dashboard';
import IDE from './pages/IDE';
import Login from './pages/Login';
import Register from './pages/Register';
import NotFound from './pages/NotFound';
import ProtectedRoute from './components/common/ProtectedRoute';

function App() {
  return (
      <AuthProvider>
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } 
          />
          <Route path="/ide/:projectSlug?" element={<IDE />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/assets/styles/global.css">
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #1e1e1e;
}

::-webkit-scrollbar-thumb {
  background: #4a4a4a;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #5a5a5a;
}

/* Split pane styles */
.Resizer {
  background: #000;
  opacity: 0.2;
  z-index: 1;
  box-sizing: border-box;
  background-clip: padding-box;
}

.Resizer:hover {
  transition: all 0.2s ease;
}

.Resizer.horizontal {
  height: 11px;
  margin: -5px 0;
  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
  cursor: row-resize;
  width: 100%;
}

.Resizer.horizontal:hover {
  border-top: 5px solid rgba(0, 0, 0, 0.5);
  border-bottom: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.vertical {
  width: 11px;
  margin: 0 -5px;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  cursor: col-resize;
}

.Resizer.vertical:hover {
  border-left: 5px solid rgba(0, 0, 0, 0.5);
  border-right: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.disabled {
  cursor: not-allowed;
}

.Resizer.disabled:hover {
  border-color: transparent;
}
</file>

<file path="src/components/Common/Button.jsx">
import React from 'react';
import clsx from 'clsx';

export default function Button({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  className = '', 
  ...props 
}) {
  const baseClasses = 'inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    ghost: 'bg-transparent hover:bg-gray-100 ',
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm rounded',
    md: 'px-4 py-2 text-base rounded-lg',
    lg: 'px-6 py-3 text-lg rounded-lg',
  };

  return (
    <button
      className={clsx(baseClasses, variants[variant], sizes[size], className)}
      {...props}
    >
      {children}
    </button>
  );
}
</file>

<file path="src/components/Common/Loader.jsx">
import React from 'react';

export default function Loader({ size = 'md', className = '' }) {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
  };

  return (
    <div className={`animate-spin rounded-full border-b-2 border-primary-600 ${sizes[size]} ${className}`}></div>
  );
}
</file>

<file path="src/components/Common/Modal.jsx">
import React from 'react';
import { FaTimes } from 'react-icons/fa';

export default function Modal({ title, children, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white  rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-4 border-b ">
          <h2 className="text-xl font-semibold text-gray-900 ">
            {title}
          </h2>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100  rounded"
          >
            <FaTimes className="text-gray-500 " />
          </button>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/Common/ProtectedRoute.jsx">
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  // Allow access to dashboard without authentication for local storage version
  // Comment this out if you want to require authentication
  return children;

  // Uncomment this to require authentication
  // return user ? children : <Navigate to="/login" />;
}
</file>

<file path="src/components/Common/ThemeToggle.jsx">
import React from 'react';
import { useTheme } from '../../contexts/ThemeContext';
import { FaSun, FaMoon } from 'react-icons/fa';

export default function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-lg hover:bg-gray-100  transition"
      aria-label="Toggle theme"
    >
      {theme === 'dark' ? (
        <FaSun className="text-yellow-400 text-xl" />
      ) : (
        <FaMoon className="text-gray-600 text-xl" />
      )}
    </button>
  );
}
</file>

<file path="src/components/Editor/CodeEditor.jsx">
import React, { useEffect, useState } from 'react';
import MonacoEditor from '@monaco-editor/react';
import { useProject } from '../../contexts/ProjectContext';
// Removed useTheme import

export default function CodeEditor() {
  const { activeFile, updateFile } = useProject();
  // Removed theme logic
  const [value, setValue] = useState('');

  useEffect(() => {
    if (activeFile) {
      setValue(activeFile.content || '');
    }
  }, [activeFile]);

  const handleChange = (newValue) => {
    setValue(newValue);
    if (activeFile) {
      updateFile(activeFile._id, { content: newValue });
    }
  };

  if (!activeFile) {
    return (
      // Light theme: "no file" placeholder
      <div className="h-full flex items-center justify-center bg-gray-50 text-gray-500">
        <p>Select a file to edit</p>
      </div>
    );
  }

  return (
    <MonacoEditor
      height="100%"
      language={activeFile.language || 'javascript'}
      value={value}
      onChange={handleChange}
      // Set theme explicitly to "light"
      theme={'light'}
      options={{
        minimap: { enabled: false },
        fontSize: 14,
        wordWrap: 'on',
        automaticLayout: true,
        tabSize: 2,
      }}
    />
  );
}
</file>

<file path="src/components/Editor/EditorTabs.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaTimes } from 'react-icons/fa';
import { getFileIcon } from '../FileExplorer/FileIcons';

export default function EditorTabs() {
  const { openFiles, activeFile, setActiveFile, closeFile } = useProject();

  if (openFiles.length === 0) {
    return null;
  }

  return (
    // Light theme: light bg, grey border
    <div className="bg-gray-100 border-b border-gray-200 flex overflow-x-auto">
      {openFiles.map(file => (
        <div
          key={file._id}
          className={`
            flex items-center gap-2 px-3 py-2 cursor-pointer border-r border-gray-200
            ${activeFile?._id === file._id 
              // Active tab: white bg, dark text
              ? 'bg-white text-gray-900' 
              // Inactive tab: grey text, light hover
              : 'text-gray-500 hover:bg-gray-200'}
          `}
          onClick={() => setActiveFile(file)}
        >
          <span className="text-sm">{getFileIcon(file.extension)}</span>
          <span className="text-sm">{file.name}</span>
          <button
            onClick={(e) => {
              e.stopPropagation();
              closeFile(file._id);
            }}
            // Light theme: close button hover
            className="ml-2 p-1 hover:bg-gray-300 rounded"
          >
            <FaTimes className="text-xs" />
          </button>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileExplorer.jsx">
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTree from './FileTree';
import { FaPlus, FaFolder, FaFile } from 'react-icons/fa';

export default function FileExplorer() {
  const { project, files, createFile } = useProject();
  const [showNewItemMenu, setShowNewItemMenu] = useState(false);

  const handleNewFile = () => {
    const name = prompt('Enter file name:');
    if (name) {
      createFile(null, name, 'file');
    }
    setShowNewItemMenu(false);
  };

  const handleNewFolder = () => {
    const name = prompt('Enter folder name:');
    if (name) {
      createFile(null, name, 'folder');
    }
    setShowNewItemMenu(false);
  };

  return (
    // Light theme: white bg, dark text
    <div className="h-full bg-white text-gray-900 overflow-auto border-r border-gray-200">
      <div className="p-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {/* Light theme: muted grey title */}
          <h3 className="text-sm font-semibold uppercase text-gray-500">Explorer</h3>
          <button
            onClick={() => setShowNewItemMenu(!showNewItemMenu)}
            // Light theme: light grey hover
            className="p-1 hover:bg-gray-100 rounded"
          >
            <FaPlus className="text-xs text-gray-600" />
          </button>
        </div>
        
        {showNewItemMenu && (
          // Light theme: light dropdown menu
          <div className="mt-2 bg-white border border-gray-200 rounded p-1 shadow-lg">
            <button
              onClick={handleNewFile}
              // Light theme: light hover
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFile className="text-xs text-gray-500" />
              New File
            </button>
            <button
              onClick={handleNewFolder}
              className="flex items-center gap-2 w-full px-2 py-1 hover:bg-gray-100 rounded text-sm text-gray-700"
            >
              <FaFolder className="text-xs text-gray-500" />
              New Folder
            </button>
          </div>
        )}
      </div>
      
      <div className="p-2">
        <FileTree />
      </div>
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileIcons.jsx">
import React from 'react';
import { FaFile, FaJs, FaCss3, FaHtml5, FaReact, FaMarkdown, FaFileCode } from 'react-icons/fa';
import { SiTypescript, SiJson } from 'react-icons/si';

export const getFileIcon = (extension) => {
  const iconMap = {
    'js': <FaJs className="text-yellow-400" />,
    'jsx': <FaReact className="text-cyan-400" />,
    'ts': <SiTypescript className="text-blue-400" />,
    'tsx': <SiTypescript className="text-blue-400" />,
    'css': <FaCss3 className="text-blue-500" />,
    'scss': <FaCss3 className="text-pink-400" />,
    'html': <FaHtml5 className="text-orange-500" />,
    'json': <SiJson className="text-yellow-600" />,
    'md': <FaMarkdown className="text-gray-400" />,
    'svg': <FaFileCode className="text-orange-400" />,
  };

  return iconMap[extension] || <FaFile className="text-gray-400" />;
};
</file>

<file path="src/components/FileExplorer/FileTree.jsx">
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';
import FileTreeNode from './FileTreeNode';

export default function FileTree() {
  const { files } = useProject();
  
  // Get root level files/folders (parentId = null)
  const rootItems = files.filter(file => !file.parentId);
  
  // Sort folders first, then files
  const sortedItems = rootItems.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  return (
    <div className="select-none">
      {sortedItems.map(item => (
        <FileTreeNode key={item._id} node={item} level={0} />
      ))}
      {sortedItems.length === 0 && (
        <div className="text-dark-400 text-sm italic p-2">
          No files yet. Create a new file or folder.
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/FileExplorer/FileTreeNode.jsx">
import React, { useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';
import { FaFolder, FaFolderOpen, FaFile, FaHtml5, FaReact, FaTrash, FaPlus } from 'react-icons/fa';
import { getFileIcon } from './FileIcons';

export default function FileTreeNode({ node, level }) {
  const { files, activeFile, openFile, deleteFile, createFile } = useProject();
  const [isExpanded, setIsExpanded] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const [showNewMenu, setShowNewMenu] = useState(false);

  const children = files.filter(file => file.parentId === node._id);
  const sortedChildren = children.sort((a, b) => {
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    return a.name.localeCompare(b.name);
  });

  const handleClick = () => {
    if (node.type === 'folder') {
      setIsExpanded(!isExpanded);
    } else {
      openFile(node);
    }
  };

  const handleDelete = (e) => {
    e.stopPropagation();
    if (confirm(`Are you sure you want to delete "${node.name}"?`)) {
      deleteFile(node._id);
    }
  };

  const handleNewFile = (e) => {
    e.stopPropagation();
    const name = prompt('Enter file name:');
    if (name) {
      createFile(node._id, name, 'file');
    }
    setShowNewMenu(false);
  };

  const handleNewFolder = (e) => {
    e.stopPropagation();
    const name = prompt('Enter folder name:');
    if (name) {
      createFile(node._id, name, 'folder');
    }
    setShowNewMenu(false);
  };

  const isActive = activeFile?._id === node._id;

  return (
    <div>
      <div
        className={`
          flex items-center gap-2 px-2 py-1 cursor-pointer hover:bg-dark-200 rounded
          ${isActive ? 'bg-dark-300' : ''}
        `}
        style={{ paddingLeft: `${level * 20 + 8}px` }}
        onClick={handleClick}
        onMouseEnter={() => setShowActions(true)}
        onMouseLeave={() => {
          setShowActions(false);
          setShowNewMenu(false);
        }}
      >
        <span className="text-sm">
          {node.type === 'folder' ? (
            isExpanded ? <FaFolderOpen className="text-yellow-600" /> : <FaFolder className="text-yellow-600" />
          ) : (
            getFileIcon(node.extension)
          )}
        </span>
        <span className="flex-1 text-sm truncate">{node.name}</span>
        
        {showActions && (
          <div className="flex items-center gap-1">
            {node.type === 'folder' && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setShowNewMenu(!showNewMenu);
                }}
                className="p-1 hover:bg-dark-300 rounded"
              >
                <FaPlus className="text-xs" />
              </button>
            )}
            <button
              onClick={handleDelete}
              className="p-1 hover:bg-red-600 hover:bg-opacity-20 rounded text-red-400"
            >
              <FaTrash className="text-xs" />
            </button>
          </div>
        )}
      </div>
      
      {showNewMenu && (
        <div className="ml-8 mt-1 bg-dark-200 rounded p-1">
          <button
            onClick={handleNewFile}
            className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
          >
            <FaFile className="text-xs" />
            New File
          </button>
          <button
            onClick={handleNewFolder}
            className="flex items-center gap-2 w-full px-2 py-1 hover:bg-dark-300 rounded text-sm"
          >
            <FaFolder className="text-xs" />
            New Folder
          </button>
        </div>
      )}
      
      {node.type === 'folder' && isExpanded && (
        <div>
          {sortedChildren.map(child => (
            <FileTreeNode key={child._id} node={child} level={level + 1} />
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/Layout/Header.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import { FaCode, FaSun, FaMoon, FaSignOutAlt, FaUser } from 'react-icons/fa';

export default function Header() {
  const { user, logout } = useAuth();
  const { theme, toggleTheme } = useTheme();

  return (
    <header className="bg-white shadow-md">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/dashboard" className="flex items-center gap-2 text-xl font-bold text-gray-900 ">
          <FaCode className="text-primary-600" />
          <span>CipherStudio</span>
        </Link>

        <div className="flex items-center gap-4">
          {/* <button 
            onClick={toggleTheme} 
            className="p-2 rounded-full text-gray-600 hover:bg-gray-100 "
          >
            {theme === 'dark' ? <FaSun /> : <FaMoon />}
          </button> */}
          
          {user ? (
            <div className="flex items-center gap-3">
              <span className="text-sm text-gray-700 ">
                Hi, {user.firstName}
              </span>
              <button
                onClick={logout}
                className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
                title="Logout"
              >
                <FaSignOutAlt />
                Logout
              </button>
            </div>
          ) : (
            <Link 
              to="/login" 
              className="flex items-center gap-1.5 text-sm text-gray-600  p-2 rounded hover:bg-gray-100 "
            >
              <FaUser />
              Login / Register
            </Link>
          )}
        </div>
      </nav>
    </header>
  );
}
</file>

<file path="src/components/Layout/IDEHeader.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { useProject } from '../../contexts/ProjectContext';
import { useAuth } from '../../contexts/AuthContext';
// Removed useTheme import
import { FaCode, FaSave, FaPlay, FaDownload, FaShare, FaHome } from 'react-icons/fa'; // Removed FaSun, FaMoon
import { useHotkeys } from 'react-hotkeys-hook';
import { toast } from 'react-toastify';

export default function IDEHeader() {
  const { project, saveProject, isSaving } = useProject();
  const { user } = useAuth();
  // Removed theme context logic
  const [autoSave, setAutoSave] = useState(true);

  // Auto-save every 30 seconds
  useEffect(() => {
    if (!autoSave) return;
    
    const interval = setInterval(() => {
      saveProject();
    }, 30000);

    return () => clearInterval(interval);
  }, [autoSave, saveProject]);

  // Keyboard shortcut for save
  useHotkeys('ctrl+s, cmd+s', (e) => {
    e.preventDefault();
    handleSave();
  });

  const handleSave = async () => {
    await saveProject();
  };

  const handleExport = () => {
    // Export project as ZIP
    toast.info('Export feature coming soon!');
  };

  const handleShare = () => {
    // Copy shareable link
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    toast.success('Link copied to clipboard!');
  };

  return (
    // Set to light theme: white background, light grey border
    <header className="bg-white border-b border-gray-200 px-4 py-2">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link to="/" className="flex items-center gap-2">
            <FaCode className="text-xl text-primary-600" />
            {/* Set to dark text */}
            <span className="text-sm font-bold text-gray-900">CipherStudio</span>
          </Link>
          
          {project && (
            <div className="flex items-center gap-2">
              {/* Set to light theme text colors */}
              <span className="text-gray-400">/</span>
              <h1 className="text-gray-900 font-medium">{project.name}</h1>
              {isSaving && (
                <span className="text-xs text-gray-500">Saving...</span>
              )}
            </div>
          )}
        </div>

        <div className="flex items-center gap-3">
          <button
            onClick={handleSave}
            // Light theme button: light grey bg, dark text
            className="flex items-center gap-2 px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm text-gray-800"
            disabled={isSaving}
          >
            <FaSave />
            Save
          </button>
          
          <button
            className="flex items-center gap-2 px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm text-white"
          >
            <FaPlay />
            Run
          </button>
          
          <button
            onClick={handleShare}
            // Light theme icon button: grey icon, darkens on hover with a light bg
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaShare />
          </button>
          
          <button
            onClick={handleExport}
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaDownload />
          </button>
          
          {/* --- Theme Toggle Button Removed --- */}
          
          <Link
            to="/dashboard"
            className="p-2 rounded text-gray-500 hover:bg-gray-100 hover:text-gray-900"
          >
            <FaHome />
          </Link>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/Preview/SandpackPreview.jsx">
import React from 'react';
import { SandpackProvider, SandpackPreview as Preview } from '@codesandbox/sandpack-react';
import { useProject } from '../../contexts/ProjectContext';
// Removed sandpackDark import

export default function SandpackPreview() {
  const { files, project } = useProject();
  
  // Convert files to Sandpack format
  const sandpackFiles = {};
  files.forEach(file => {
    if (file.type === 'file') {
      sandpackFiles[file.path] = {
        code: file.content || ''
      };
    }
  });

  // Ensure we have the basic files
  if (!sandpackFiles['/src/index.js']) {
    sandpackFiles['/src/index.js'] = {
      code: `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);`
    };
  }

  if (!sandpackFiles['/src/App.js']) {
    sandpackFiles['/src/App.js'] = {
      code: `export default function App() {
  return <h1>Welcome to CipherStudio!</h1>;
}`
    };
  }

  return (
    <div className="h-full bg-white">
      <SandpackProvider
        template="react"
        // Removed theme prop to default to light theme
        files={sandpackFiles}
        options={{
          showNavigator: true,
          showTabs: false,
          showLineNumbers: true,
          showInlineErrors: true,
          wrapContent: true,
          editorHeight: "100%",
        }}
      >
        <Preview
          showNavigator={true}
          showRefreshButton={true}
          showOpenInCodeSandbox={false}
        />
      </SandpackProvider>
    </div>
  );
}
</file>

<file path="src/contexts/AuthContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { authService } from '../services/authService';
import { toast } from 'react-toastify';

const AuthContext = createContext({});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const userData = await authService.getMe();
        setUser(userData);
      } catch (error) {
        localStorage.removeItem('token');
      }
    }
    setLoading(false);
  };

  const login = async (email, password) => {
    try {
      const response = await authService.login(email, password);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Login successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Login failed');
      return { success: false, error: error.message };
    }
  };

  const register = async (userData) => {
    try {
      const response = await authService.register(userData);
      localStorage.setItem('token', response.token);
      setUser(response);
      toast.success('Registration successful!');
      navigate('/dashboard');
      return { success: true };
    } catch (error) {
      toast.error(error.message || 'Registration failed');
      return { success: false, error: error.message };
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
    toast.info('Logged out successfully');
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    checkAuth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="src/contexts/ProjectContext.jsx">
import React, { createContext, useContext, useState, useCallback } from 'react';
import { projectService } from '../services/projectService';
import { fileService } from '../services/fileService';
import { toast } from 'react-toastify';
import { nanoid } from 'nanoid';

const ProjectContext = createContext({});

export const useProject = () => useContext(ProjectContext);

export const ProjectProvider = ({ children }) => {
  const [project, setProject] = useState(null);
  const [files, setFiles] = useState([]);
  const [activeFile, setActiveFile] = useState(null);
  const [openFiles, setOpenFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const loadProject = async (projectSlug) => {
    setLoading(true);
    try {
      const data = await projectService.getProject(projectSlug);
      setProject(data.project);
      setFiles(data.files);
      return data;
    } catch (error) {
      toast.error('Failed to load project');
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const createProject = async (projectData) => {
    try {
      const newProject = await projectService.createProject(projectData);
      toast.success('Project created successfully');
      return newProject;
    } catch (error) {
      toast.error('Failed to create project');
      throw error;
    }
  };

  const saveProject = async () => {
    if (!project) return;
    
    setIsSaving(true);
    try {
      // Save to localStorage for MVP
      const projectData = {
        project,
        files,
        timestamp: Date.now()
      };
      localStorage.setItem(`project_${project.projectSlug}`, JSON.stringify(projectData));
      
      // If user is logged in, save to backend
      const token = localStorage.getItem('token');
      if (token) {
        await projectService.updateProject(project._id, { files });
      }
      
      toast.success('Project saved');
    } catch (error) {
      toast.error('Failed to save project');
    } finally {
      setIsSaving(false);
    }
  };

  const createFile = async (parentId, name, type = 'file') => {
    const newFile = {
      _id: nanoid(),
      projectId: project?._id || 'local',
      parentId,
      name,
      type,
      content: type === 'file' ? '' : undefined,
      path: buildPath(parentId, name),
      extension: type === 'file' ? name.split('.').pop() : undefined,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    setFiles(prev => [...prev, newFile]);
    
    if (type === 'file') {
      openFile(newFile);
    }

    // Save to backend if logged in
    const token = localStorage.getItem('token');
    if (token && project?._id) {
      try {
        await fileService.createFile(newFile);
      } catch (error) {
        console.error('Failed to save file to backend:', error);
      }
    }

    return newFile;
  };

  const updateFile = (fileId, updates) => {
    setFiles(prev => prev.map(file => 
      file._id === fileId 
        ? { ...file, ...updates, updatedAt: new Date().toISOString() }
        : file
    ));
  };

  const deleteFile = (fileId) => {
    const fileToDelete = files.find(f => f._id === fileId);
    if (!fileToDelete) return;

    // Close file if open
    setOpenFiles(prev => prev.filter(f => f._id !== fileId));
    if (activeFile?._id === fileId) {
      setActiveFile(null);
    }

    // Delete file and all children if folder
    const idsToDelete = [fileId];
    if (fileToDelete.type === 'folder') {
      const getChildrenIds = (parentId) => {
        const children = files.filter(f => f.parentId === parentId);
        children.forEach(child => {
          idsToDelete.push(child._id);
          if (child.type === 'folder') {
            getChildrenIds(child._id);
          }
        });
      };
      getChildrenIds(fileId);
    }

    setFiles(prev => prev.filter(f => !idsToDelete.includes(f._id)));
  };

  const openFile = (file) => {
    if (file.type !== 'file') return;
    
    if (!openFiles.find(f => f._id === file._id)) {
      setOpenFiles(prev => [...prev, file]);
    }
    setActiveFile(file);
  };

  const closeFile = (fileId) => {
    setOpenFiles(prev => {
      const newOpenFiles = prev.filter(f => f._id !== fileId);
      if (activeFile?._id === fileId && newOpenFiles.length > 0) {
        setActiveFile(newOpenFiles[newOpenFiles.length - 1]);
      } else if (newOpenFiles.length === 0) {
        setActiveFile(null);
      }
      return newOpenFiles;
    });
  };

  const buildPath = (parentId, name) => {
    if (!parentId) return `/${name}`;
    const parent = files.find(f => f._id === parentId);
    return parent ? `${parent.path}/${name}` : `/${name}`;
  };

  const value = {
    project,
    files,
    activeFile,
    openFiles,
    loading,
    isSaving,
    loadProject,
    createProject,
    saveProject,
    createFile,
    updateFile,
    deleteFile,
    openFile,
    closeFile,
    setActiveFile
  };

  return (
    <ProjectContext.Provider value={value}>
      {children}
    </ProjectContext.Provider>
  );
};
</file>

<file path="src/contexts/ThemeContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext({});

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem('theme');
    return savedTheme || 'dark';
  });

  useEffect(() => {
    localStorage.setItem('theme', theme);
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};
</file>

<file path="src/hooks/useDebounce.js">
import { useState, useEffect } from 'react';

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
</file>

<file path="src/hooks/useLocalStorage.js">
import { useState, useEffect } from 'react';

export function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error loading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { ToastContainer } from 'react-toastify'
import App from './App.jsx'
import 'react-toastify/dist/ReactToastify.css'
// import './assets/styles/global.css'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
      <ToastContainer
        position="bottom-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="src/pages/Dashboard.jsx">
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { projectService } from '../services/projectService';
import { storageService } from '../services/storageService';
import { FaPlus, FaFolder, FaClock, FaTrash, FaCode } from 'react-icons/fa';
import { toast } from 'react-toastify';
import Header from '../components/Layout/Header';
import Modal from '../components/Common/Modal';

export default function Dashboard() {
    const { user } = useAuth();
    const navigate = useNavigate();
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [newProject, setNewProject] = useState({
        name: '',
        description: '',
        framework: 'react'
    });

    useEffect(() => {
        loadProjects();
    }, [user]);

    const loadProjects = async () => {
        setLoading(true);
        try {
            if (user) {
                const response = await projectService.getProjects();
                setProjects(response || []);
            } else {
                // Load from localStorage for non-authenticated users
                const localProjects = storageService.getAllProjects();
                setProjects(localProjects.map(p => p.project));
            }
        } catch (error) {
            console.error('Failed to load projects:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateProject = async () => {
        if (!newProject.name) {
            toast.error('Project name is required');
            return;
        }

        try {
            if (user) {
                const project = await projectService.createProject(newProject);
                navigate(`/ide/${project.projectSlug}`);
            } else {
                // Create local project
                const projectSlug = `${newProject.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`;
                const project = {
                    ...newProject,
                    projectSlug,
                    _id: `local_${Date.now()}`,
                    createdAt: new Date().toISOString()
                };

                storageService.saveProject(projectSlug, {
                    project,
                    files: [],
                    timestamp: Date.now()
                });

                navigate(`/ide/${projectSlug}`);
            }
        } catch (error) {
            toast.error('Failed to create project');
        }
    };

    const handleDeleteProject = async (projectId, projectSlug) => {
        if (!confirm('Are you sure you want to delete this project?')) return;

        try {
            if (user) {
                await projectService.deleteProject(projectId);
            } else {
                storageService.deleteProject(projectSlug);
            }
            await loadProjects();
            toast.success('Project deleted successfully');
        } catch (error) {
            toast.error('Failed to delete project');
        }
    };

    return (
        <div className="min-h-screen bg-gray-50 ">
            <Header />

            <div className="container mx-auto px-4 py-8">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 ">
                        My Projects
                    </h1>
                    <button
                        onClick={() => setShowCreateModal(true)}
                        className="flex items-center gap-2 bg-gray-300 text-black px-4 py-2 rounded-lg hover:bg-gray-200 transition"
                    >
                        <FaPlus />
                        New Project
                    </button>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
                    </div>
                ) : projects.length === 0 ? (
                    <div className="text-center py-12">
                        <FaFolder className="text-6xl text-gray-400 mx-auto mb-4" />
                        <h2 className="text-xl text-gray-600  mb-2">No projects yet</h2>
                        <p className="text-gray-500 ">Create your first project to get started</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {projects.map((project) => (
                            <div
                                key={project._id || project.projectSlug}
                                className="bg-white  rounded-lg shadow-md hover:shadow-lg transition-shadow"
                            >
                                <Link
                                    to={`/ide/${project.projectSlug}`}
                                    className="block p-6"
                                >
                                    <div className="flex items-start justify-between mb-4">
                                        <FaCode className="text-3xl text-primary-600" />
                                        <span className="text-xs bg-gray-100  px-2 py-1 rounded">
                                            {project.framework || 'react'}
                                        </span>
                                    </div>
                                    <h3 className="text-lg font-semibold text-gray-900  mb-2">
                                        {project.name}
                                    </h3>
                                    <p className="text-gray-600  text-sm mb-4 line-clamp-2">
                                        {project.description || 'No description'}
                                    </p>
                                    <div className="flex items-center text-xs text-gray-500 ">
                                        <FaClock className="mr-1" />
                                        {new Date(project.createdAt).toLocaleDateString()}
                                    </div>
                                </Link>
                                <div className="border-t  px-6 py-3">
                                    <button
                                        onClick={(e) => {
                                            e.preventDefault();
                                            handleDeleteProject(project._id, project.projectSlug);
                                        }}
                                        className="text-red-600 hover:text-red-700 text-sm flex items-center gap-1"
                                    >
                                        <FaTrash />
                                        Delete
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {showCreateModal && (
                <Modal
                    title="Create New Project"
                    onClose={() => setShowCreateModal(false)}
                >
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Project Name *
                            </label>
                            <input
                                type="text"
                                value={newProject.name}
                                onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                                placeholder="My Awesome Project"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Description
                            </label>
                            <textarea
                                value={newProject.description}
                                onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                                rows="3"
                                placeholder="A brief description of your project..."
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700  mb-1">
                                Framework
                            </label>
                            <select
                                value={newProject.framework}
                                onChange={(e) => setNewProject({ ...newProject, framework: e.target.value })}
                                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                            >
                                <option value="react">React</option>
                                <option value="vue">Vue</option>
                                <option value="vanilla">Vanilla JS</option>
                            </select>
                        </div>
                        <div className="flex justify-end gap-3 pt-4">
                            <button
                                onClick={() => setShowCreateModal(false)}
                                className="px-4 py-2 text-gray-600  hover:text-gray-700 "
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleCreateProject}
                                className="px-4 py-2 bg-gray-300 text-black rounded-lg hover:bg-gray-200"
                            >
                                Create Project
                            </button>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
}
</file>

<file path="src/pages/IDE.jsx">
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import Split from 'react-split';
import { ProjectProvider } from '../contexts/ProjectContext';
import FileExplorer from '../components/FileExplorer/FileExplorer';
import CodeEditor from '../components/Editor/CodeEditor';
import SandpackPreview from '../components/Preview/SandpackPreview';
import IDEHeader from '../components/Layout/IDEHeader';
import EditorTabs from '../components/Editor/EditorTabs';
import { storageService } from '../services/storageService';
import { toast } from 'react-toastify';

export default function IDE() {
  const { projectSlug } = useParams();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (projectSlug) {
      loadProject();
    } else {
      createTempProject();
    }
  }, [projectSlug]);

  const loadProject = async () => {
    setLoading(true);
    try {
      const localProject = storageService.loadProject(projectSlug);
      if (localProject) {
        setLoading(false);
        return;
      }
    } catch (error) {
      toast.error('Failed to load project');
    } finally {
      setLoading(false);
    }
  };

  const createTempProject = () => {
    setLoading(false);
  };

  if (loading) {
    return (
      <div className="h-screen flex items-center justify-center ">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-dark-600">Loading project...</p>
        </div>
      </div>
    );
  }

  return (
    <ProjectProvider>
      <div className="h-screen flex flex-col bg-dark-50">
        <IDEHeader />
        <div className="flex-1 overflow-hidden">
          {/* Outer split: File explorer + Editor/Preview */}
          <Split
            className="flex h-full"
            sizes={[20, 80]} // percentage widths
            minSize={200}
            gutterSize={6}
          >
            <FileExplorer />

            {/* Inner split: Code editor + Live preview */}
            <Split
              className="flex h-full"
              sizes={[50, 50]}
              minSize={300}
              gutterSize={6}
            >
              <div className="h-full flex flex-col bg-dark-100">
                <EditorTabs />
                <CodeEditor />
              </div>

              <SandpackPreview />
            </Split>
          </Split>
        </div>
      </div>
    </ProjectProvider>
  );
}
</file>

<file path="src/pages/Login.jsx">
// client/src/pages/Login.jsx
// Update the input className to fix visibility issues

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode, FaEnvelope, FaLock } from 'react-icons/fa';

export default function Login() {
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    await login(formData.email, formData.password);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Welcome Back
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Email Address
            </label>
            <div className="relative">
              <FaEnvelope className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="you@example.com"
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-2">
              Password
            </label>
            <div className="relative">
              <FaLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full pl-10 pr-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white text-gray-900 "
                placeholder="••••••••"
                required
              />
            </div>
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Signing in...' : 'Sign In'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Don't have an account?{' '}
            <Link to="/register" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign Up
            </Link>
          </p>
        </div>
        
        <div className="mt-4 text-center">
          <Link to="/ide" className="text-sm text-gray-500  hover:text-gray-600">
            Continue without account →
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/NotFound.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { FaHome, FaCode } from 'react-icons/fa';

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 ">
      <div className="text-center">
        <h1 className="text-9xl font-bold text-primary-600">404</h1>
        <h2 className="text-3xl font-semibold text-gray-900  mb-4">
          Page Not Found
        </h2>
        <p className="text-gray-600  mb-8">
          The page you're looking for doesn't exist or has been moved.
        </p>
        <div className="flex gap-4 justify-center">
          <Link
            to="/"
            className="flex items-center gap-2 bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition"
          >
            <FaHome />
            Go Home
          </Link>
          <Link
            to="/ide"
            className="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition"
          >
            <FaCode />
            Open IDE
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/Register.jsx">
// client/src/pages/Register.jsx
// Update all input field classNames

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { FaCode } from 'react-icons/fa';

export default function Register() {
  const { register } = useAuth();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    mobile: ''
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    
    if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    const { confirmPassword, ...userData } = formData;
    await register(userData);
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-primary-600 to-primary-800 py-12">
      <div className="bg-white  p-8 rounded-lg shadow-xl w-full max-w-md">
        <div className="flex items-center justify-center mb-8">
          <FaCode className="text-4xl text-primary-600 mr-3" />
          <h1 className="text-3xl font-bold text-gray-900 ">CipherStudio</h1>
        </div>
        
        <h2 className="text-2xl font-semibold text-gray-900  mb-6 text-center">
          Create Account
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                First Name
              </label>
              <input
                type="text"
                value={formData.firstName}
                onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700  mb-1">
                Last Name
              </label>
              <input
                type="text"
                value={formData.lastName}
                onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Email Address
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Mobile (Optional)
            </label>
            <input
              type="tel"
              value={formData.mobile}
              onChange={(e) => setFormData({ ...formData, mobile: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Password
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">{errors.password}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700  mb-1">
              Confirm Password
            </label>
            <input
              type="password"
              value={formData.confirmPassword}
              onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300  rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white  text-gray-900 "
              required
            />
            {errors.confirmPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>
            )}
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-primary-700 transition disabled:opacity-50"
          >
            {loading ? 'Creating Account...' : 'Sign Up'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-600 ">
            Already have an account?{' '}
            <Link to="/login" className="text-primary-600 hover:text-primary-700 font-medium">
              Sign In
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/services/api.js">
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor to add token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const message = error.response?.data?.message || error.message || 'Something went wrong';
    return Promise.reject({ message, status: error.response?.status });
  }
);

export default api;
</file>

<file path="src/services/authService.js">
import api from './api';

export const authService = {
  register: async (userData) => {
    const response = await api.post('/auth/register', userData);
    return response.data;
  },

  login: async (email, password) => {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },

  getMe: async () => {
    const response = await api.get('/auth/me');
    return response.data;
  },

  updatePassword: async (currentPassword, newPassword) => {
    const response = await api.put('/auth/updatepassword', {
      currentPassword,
      newPassword
    });
    return response.data;
  }
};
</file>

<file path="src/services/fileService.js">
import api from './api';

export const fileService = {
  createFile: async (fileData) => {
    const response = await api.post('/files', fileData);
    return response.data;
  },

  getFile: async (fileId) => {
    const response = await api.get(`/files/${fileId}`);
    return response.data;
  },

  updateFile: async (fileId, updates) => {
    const response = await api.put(`/files/${fileId}`, updates);
    return response.data;
  },

  deleteFile: async (fileId) => {
    const response = await api.delete(`/files/${fileId}`);
    return response.data;
  },

  moveFile: async (fileId, newParentId) => {
    const response = await api.put(`/files/${fileId}/move`, { newParentId });
    return response.data;
  }
};
</file>

<file path="src/services/projectService.js">
import api from './api';

export const projectService = {
  createProject: async (projectData) => {
    const response = await api.post('/projects', projectData);
    return response.data;
  },

  getProjects: async (page = 1, limit = 10) => {
    const response = await api.get(`/projects?page=${page}&limit=${limit}`);
    return response.data;
  },

  getProject: async (projectSlug) => {
    const response = await api.get(`/projects/${projectSlug}`);
    return response.data;
  },

  updateProject: async (projectId, updates) => {
    const response = await api.put(`/projects/${projectId}`, updates);
    return response.data;
  },

  deleteProject: async (projectId) => {
    const response = await api.delete(`/projects/${projectId}`);
    return response.data;
  },

  forkProject: async (projectId) => {
    const response = await api.post(`/projects/${projectId}/fork`);
    return response.data;
  }
};
</file>

<file path="src/services/storageService.js">
export const storageService = {
  saveProject: (projectSlug, data) => {
    try {
      localStorage.setItem(`project_${projectSlug}`, JSON.stringify(data));
      return true;
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
      return false;
    }
  },

  loadProject: (projectSlug) => {
    try {
      const data = localStorage.getItem(`project_${projectSlug}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('Failed to load from localStorage:', error);
      return null;
    }
  },

  deleteProject: (projectSlug) => {
    try {
      localStorage.removeItem(`project_${projectSlug}`);
      return true;
    } catch (error) {
      console.error('Failed to delete from localStorage:', error);
      return false;
    }
  },

  getAllProjects: () => {
    try {
      const projects = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('project_')) {
          const data = localStorage.getItem(key);
          if (data) {
            projects.push(JSON.parse(data));
          }
        }
      }
      return projects;
    } catch (error) {
      console.error('Failed to get all projects:', error);
      return [];
    }
  }
};
</file>

<file path="src/utils/constants.js">
export const FILE_EXTENSIONS = {
  JAVASCRIPT: ['js', 'mjs'],
  JSX: ['jsx'],
  TYPESCRIPT: ['ts'],
  TSX: ['tsx'],
  CSS: ['css'],
  SCSS: ['scss', 'sass'],
  HTML: ['html', 'htm'],
  JSON: ['json'],
  MARKDOWN: ['md', 'markdown'],
  TEXT: ['txt'],
  XML: ['xml'],
  YAML: ['yml', 'yaml'],
};

export const LANGUAGE_MAP = {
  js: 'javascript',
  jsx: 'javascript',
  ts: 'typescript',
  tsx: 'typescript',
  css: 'css',
  scss: 'scss',
  html: 'html',
  json: 'json',
  md: 'markdown',
  txt: 'plaintext',
  xml: 'xml',
  yml: 'yaml',
  yaml: 'yaml',
};

export const DEFAULT_PROJECT_STRUCTURE = {
  framework: 'react',
  dependencies: {
    'react': '^18.2.0',
    'react-dom': '^18.2.0'
  }
};

export const THEMES = {
  LIGHT: 'light',
  DARK: 'dark'
};

export const AUTO_SAVE_INTERVAL = 30000; // 30 seconds
</file>

<file path="src/utils/fileTemplates.js">
export const fileTemplates = {
  'App.js': `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to CipherStudio!</h1>
        <p>Start editing to see changes in real-time.</p>
      </header>
    </div>
  );
}

export default App;`,

  'App.css': `.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.App-header {
  background-color: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 40px;
  border-radius: 20px;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  color: white;
}

.App-header h1 {
  margin: 0 0 20px 0;
  font-size: 2.5rem;
}

.App-header p {
  margin: 0;
  opacity: 0.9;
  font-size: 1.2rem;
}`,

  'index.js': `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,

  'index.css': `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`,

  'index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CipherStudio Project" />
    <title>CipherStudio Project</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,

  'package.json': `{
  "name": "cipherstudio-project",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}`
};

export const createDefaultFiles = () => {
  const files = [
    {
      name: 'src',
      type: 'folder',
      path: '/src'
    },
    {
      name: 'public',
      type: 'folder',
      path: '/public'
    },
    {
      name: 'App.js',
      type: 'file',
      path: '/src/App.js',
      content: fileTemplates['App.js'],
      extension: 'js',
      language: 'javascript'
    },
    {
      name: 'App.css',
      type: 'file',
      path: '/src/App.css',
      content: fileTemplates['App.css'],
      extension: 'css',
      language: 'css'
    },
    {
      name: 'index.js',
      type: 'file',
      path: '/src/index.js',
      content: fileTemplates['index.js'],
      extension: 'js',
      language: 'javascript'
    },
    {
      name: 'index.css',
      type: 'file',
      path: '/src/index.css',
      content: fileTemplates['index.css'],
      extension: 'css',
      language: 'css'
    },
    {
      name: 'index.html',
      type: 'file',
      path: '/public/index.html',
      content: fileTemplates['index.html'],
      extension: 'html',
      language: 'html'
    },
    {
      name: 'package.json',
      type: 'file',
      path: '/package.json',
      content: fileTemplates['package.json'],
      extension: 'json',
      language: 'json'
    }
  ];

  return files;
};
</file>

<file path="src/utils/helpers.js">
import { nanoid } from 'nanoid';

export const generateId = () => nanoid();

export const getFileExtension = (filename) => {
  const parts = filename.split('.');
  return parts.length > 1 ? parts.pop().toLowerCase() : '';
};

export const getFileLanguage = (filename) => {
  const extension = getFileExtension(filename);
  const languageMap = {
    js: 'javascript',
    jsx: 'javascript',
    ts: 'typescript',
    tsx: 'typescript',
    css: 'css',
    scss: 'scss',
    html: 'html',
    json: 'json',
    md: 'markdown',
    txt: 'plaintext',
  };
  return languageMap[extension] || 'plaintext';
};

export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
};

export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

export const buildFileTree = (files) => {
  const tree = {};
  const rootFiles = [];

  files.forEach(file => {
    if (!file.parentId) {
      rootFiles.push(file);
    } else {
      if (!tree[file.parentId]) {
        tree[file.parentId] = [];
      }
      tree[file.parentId].push(file);
    }
  });

  return { tree, rootFiles };
};
</file>

<file path="src/utils/validators.js">
export const validateEmail = (email) => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

export const validatePassword = (password) => {
  return password.length >= 6;
};

export const validateProjectName = (name) => {
  return name.length > 0 && name.length <= 50;
};

export const validateFileName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};

export const validateFolderName = (name) => {
  // Check for invalid characters
  const invalidChars = /[<>:"/\\|?*]/;
  return !invalidChars.test(name) && name.length > 0;
};
</file>

<file path="tailwind.config.js">
// client/tailwind.config.js
export default {
  darkMode: 'class', // enables Tailwind's dark mode toggle via class
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: {
    extend: {
      colors: {
        dark: {
          50: '#1e1e1e',
          100: '#2a2a2a',
          200: '#333333',
          300: '#3d3d3d',
          400: '#555555',
          500: '#777777',
          600: '#999999',
        },
        primary: {
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
        },
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true
      }
    }
  }
})
</file>

</files>
